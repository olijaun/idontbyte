<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-05-24T16:01:22+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">I don’t byte</title><subtitle>Blog about Java Programming and Software Architecture
</subtitle><author><name>Oliver Jaun</name></author><entry><title type="html">Event Sourcing - Thinking Differently</title><link href="http://localhost:4000/blog/2020/05/eventsourcing-thinking-differently" rel="alternate" type="text/html" title="Event Sourcing - Thinking Differently" /><published>2020-05-24T00:00:00+02:00</published><updated>2020-05-24T00:00:00+02:00</updated><id>http://localhost:4000/blog/2020/05/eventsourcing-thinking-differently</id><content type="html" xml:base="http://localhost:4000/blog/2020/05/eventsourcing-thinking-differently">&lt;p&gt;This is the fourth part in a series about Event Sourcing. In the past year I was involved in the development of a Java application using Event Sourcing. Actually we did it twice using two different approaches. In this post I’d like to share some thoughts about commands in the context of CQRS and Event Sourcing. See also my other post on Event Sourcing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Part I: &lt;a href=&quot;/blog/2020/02/eventsourcing-notes-on-eventstores&quot;&gt;Notes on Event Stores&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Part II: &lt;a href=&quot;/blog/2020/02/eventsourcing-notes-on-commands&quot;&gt;Commands can be rejected&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Part III: &lt;a href=&quot;/blog/2020/03/eventsourcing-implementation-approaches&quot;&gt;Implementation Approaches&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Part IV: &lt;a href=&quot;/blog/2020/05/eventsourcing-thinking-differently&quot;&gt;Thinking Differently&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post assumes that you know what Event Sourcing is. If not then I recommend that you read &lt;a href=&quot;https://cqrs.files.wordpress.com/2010/11/cqrs_documents.pdf&quot;&gt;this Document from Greg Young&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;keep-read-and-write-model-separate-when-using-cqrs&quot;&gt;Keep Read and Write Model separate when using CQRS&lt;/h1&gt;

&lt;p&gt;As I mentioned earlier: The basic definition of Event Sourcing is that you reconstitute the state of the application by replaying all past events. Event Sourcing does not necessarily mean that CQRS needs to be used although often it might be very useful. CQRS splits the application in two parts: the Read Model and the Write Model. This allows for better scaling and separation of concern. If CQRS is used it is important to really keep the two sides separate.&lt;/p&gt;

&lt;p&gt;You might ask: “so what, where’s the problem”? The problem is, that it might be necessary to rethink the application’s design in order to achieve this. Let’s look at an example.&lt;/p&gt;

&lt;p&gt;Assume a system that manages memberships. Each membership states the year and references a member. The RESTful service might look like this (Note that for the sake of simplicity I do not use &lt;a href=&quot;https://en.wikipedia.org/wiki/HATEOAS&quot;&gt;HATEOS&lt;/a&gt; and other fancy stuff):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;POST /memberships

{
    &quot;year&quot;: 2020,
    &quot;memberId&quot;: &quot;123&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Creating and saving a membership could look as follows. Note that creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;Membership&lt;/code&gt; automatically generates an ID for us:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MembershipApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MembershipId&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createMembership&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;Membership&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Membership&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now the business defines a business rule which states that there can only be one membership per member and year. In a “normal” DDD application one could do the following:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MembershipApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MembershipId&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createMembership&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MemberId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AlreadyMemberForGivenYear&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Membership&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberships&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberships&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AlreadyMemberForGivenYear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;Membership&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Membership&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Well ok, this check would probably belong in a domain service and not an application service. But that is not the point. Also to actually guarantee that there won’t be two memberships for the same member and year this would not be sufficient in a classic DDD application neither. In a concurrency situation the &lt;code class=&quot;highlighter-rouge&quot;&gt;isEmpty()&lt;/code&gt; could be OK but then another thread saves the membership just after the check. This could be fixed with a unique constraint on the database. But then we are actually implementing a business rule in the infrastructure.&lt;/p&gt;

&lt;p&gt;When using CQRS the problem becomes even more obvious: You cannot make a unique constraint on an Event Store for this check. Sure, there are usually some unique constraints in an Event Store. E.g. the event ID or the sequence numbers. But they are not specific for a business requirement. Also in CQRS you have to assume that the store will be up-to-date probably hours after an aggregate has been modified. Other reasons to use CQRS are scalability and availability. By using the read model each time a new membership gets created there is load generated on the Read Model. Further the Write Model’s performance and availability depends on the Read Model which is not desirable.&lt;/p&gt;

&lt;p&gt;One solution is using a &lt;code class=&quot;highlighter-rouge&quot;&gt;MembershipId&lt;/code&gt; that combines &lt;code class=&quot;highlighter-rouge&quot;&gt;memberId&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;year&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MembershipId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the &lt;code class=&quot;highlighter-rouge&quot;&gt;MembershipId&lt;/code&gt; used to store the aggregate might be &lt;code class=&quot;highlighter-rouge&quot;&gt;123-2020&lt;/code&gt;. In order to check if a membership for the given member exists one can just try to load it:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MembershipApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MembershipId&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createMembership&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MemberId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AlreadyMemberForGivenYear&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;Membership&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Membership&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Membership&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberships&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;membership&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberships&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AlreadyMemberForGivenYear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It would be necessary to think about &lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt; and how it behaves if there exists an aggregate with this ID already. One option would be to make two different methods like &lt;code class=&quot;highlighter-rouge&quot;&gt;create()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;update()&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;create()&lt;/code&gt; would throw an exception if an aggregate with the given ID already exists.&lt;/p&gt;

&lt;p&gt;There is another disadvantage of using such a combined key: If the business suddenly decides that there may now be multiple memberships for the same member and year then what? This would mean that we have to change the key of all our &lt;code class=&quot;highlighter-rouge&quot;&gt;Membership&lt;/code&gt; aggregates.&lt;/p&gt;

&lt;h1 id=&quot;thinking-differently&quot;&gt;Thinking differently&lt;/h1&gt;

&lt;p&gt;I’m not saying the problem here applies only to Event Sourced applications with CQRS. However I think the fact that it is not possible to randomly search the database forces you to think differently and “harder” because you simply cannot do some dirty hacks. This will eventually lead to a better solution as I will explain now:&lt;/p&gt;

&lt;p&gt;In the Membership Example a new aggregate could be added: &lt;code class=&quot;highlighter-rouge&quot;&gt;Member&lt;/code&gt;. This allows to do the following:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MembershipApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MembershipId&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createMembership&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MemberId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AlreadyMemberForGivenYear&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Membership&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;membership&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Membership&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addMembership&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;membership&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// may throw AlreadyMemberForGivenYear&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;memberRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;membership&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I think this is much better. The business rule can now be fully implemented in the domain. We do not need a combined key that must be changed if the business rule changes in the future.&lt;/p&gt;

&lt;p&gt;There is however something to be aware of in the example: I made &lt;code class=&quot;highlighter-rouge&quot;&gt;Membership&lt;/code&gt; an entity of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Member&lt;/code&gt; aggregate. When a client creates a new Membership by posting to &lt;code class=&quot;highlighter-rouge&quot;&gt;/memberships&lt;/code&gt; we want to return the ID of the newly created membership in order to access it afterwards by using GET on &lt;code class=&quot;highlighter-rouge&quot;&gt;/memberships/{membershipId}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It would be possible to still return a combined key in the RESTfull service. So we could return again something like &lt;code class=&quot;highlighter-rouge&quot;&gt;123-2020&lt;/code&gt;. Using this key it is possible to extract the member’s ID, load the &lt;code class=&quot;highlighter-rouge&quot;&gt;Member&lt;/code&gt; aggregate and then locate the membership using the year in order to update then the membership. However image again that the business rule changes, and it is now possible to have multiple memberships for the same member and year. The ID would change. Any system that is holding a reference to the membership (for example the accounting system) will break.&lt;/p&gt;

&lt;p&gt;this can fixed by generating something like a UUID for each membership. When posting to &lt;code class=&quot;highlighter-rouge&quot;&gt;/memberships&lt;/code&gt; the service would return for example &lt;code class=&quot;highlighter-rouge&quot;&gt;e06d8423-f90c-4c59-839e-e71ade68f37f&lt;/code&gt;. Reading is not a problem, because the Read Model can contain this ID and it is possible to simply look it up. But now there is a problem when updating a membership: Updating is a write operation so it is only allowed to use the Write Model. But how can we access the &lt;code class=&quot;highlighter-rouge&quot;&gt;Membership&lt;/code&gt; if we don’t know the Member’s ID?&lt;/p&gt;

&lt;p&gt;A simple solution is to still use a combined ID but this time a combination of the &lt;code class=&quot;highlighter-rouge&quot;&gt;MemberId&lt;/code&gt; and the generated &lt;code class=&quot;highlighter-rouge&quot;&gt;MembershipId&lt;/code&gt;. E.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;123@e06d8423-f90c-4c59-839e-e71ade68f37f&lt;/code&gt; (I’m using ‘@’ here as a separator because the UUID already contains dashes). This ID is stable and allows to change the business rules for adding Memberships without affecting the &lt;code class=&quot;highlighter-rouge&quot;&gt;MembershipId&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you’re company insists in using a specific format for IDs then you would have to do some kind of translation from your combined ID to one that satisfies your companies rules.&lt;/p&gt;

&lt;h1 id=&quot;towards-self-contained-systems&quot;&gt;Towards Self Contained Systems&lt;/h1&gt;

&lt;p&gt;A Self Contained System (SCS) has the following characteristics (among others, see &lt;a href=&quot;https://scs-architecture.org/&quot;&gt;here&lt;/a&gt;);&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Each SCS is an autonomous web application. […]&lt;/li&gt;
  &lt;li&gt;Communication with other SCSs or 3rd party systems is asynchronous wherever possible. […]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s look again at our membership service:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MembershipApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MembershipId&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createMembership&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MemberId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AlreadyMemberForGivenYear&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
         &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;nc&quot;&gt;MembershipId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;membershipId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addMembership&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// may throw AlreadyMemberForGivenYear&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;memberRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;membershipId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The service first checks if a Member with the given ID exists. If not, it creates a new one. This is one possibility. The problem is that a client might provide a non-existent memberId. The service could check whether the Member actually exists by calling the member system using a RESTfull service. The example uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;MemberPort&lt;/code&gt; for this (I use the term port here to emphasize the Ports and Adapter Architecture, aka Hexagonal).&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MembershipApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MembershipId&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createMembership&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MemberId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AlreadyMemberForGivenYear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberNotFoundException&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
         &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberPort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;memberExists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
             &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MemberNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
             &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;nc&quot;&gt;MembershipId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;membershipId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addMembership&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// may throw AlreadyMemberForGivenYear&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;memberRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;membershipId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This only replicates the member if it exists. This is fine, but it is not really self contained. We should communicate asynchronously with other systems. So the solution would be to subscribe to member events and replicate members when receiving events. This way the system is very independent, and it is possible to add memberships event if the member system itself is not available.&lt;/p&gt;

&lt;p&gt;Here’s a sketch of how this could look like:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MembershipApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MembershipId&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createMembership&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MemberId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AlreadyMemberForGivenYear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberNotFoundException&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
         &lt;span class=&quot;nc&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MemberNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;nc&quot;&gt;MembershipId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;membershipId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addMembership&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memberId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// may throw AlreadyMemberForGivenYear&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;memberRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;membershipId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
     
     &lt;span class=&quot;c1&quot;&gt;// handle events from member system and keep members up-to-date&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MemberEvent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;// [...]&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;memberRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;How you process exactly the member events depends of course on your messaging system and framework. This is just a sketch. It is however important to note that updating the members is done in the Write Side of your application. It is not to be confused with the event processing that it probably going on elsewhere in this application in order to update the Read Model.&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;When implementing an event-sourced application with CQRS for the first time the fact that you must not access the Read Model when writing may be unfamiliar. However I think it will lead to a better design in respect to DDD eventually. This is of course my personal and highly subjective opinion.&lt;/p&gt;</content><author><name>Oliver Jaun</name></author><summary type="html">This is the fourth part in a series about Event Sourcing. In the past year I was involved in the development of a Java application using Event Sourcing. Actually we did it twice using two different approaches. In this post I’d like to share some thoughts about commands in the context of CQRS and Event Sourcing. See also my other post on Event Sourcing: Part I: Notes on Event Stores Part II: Commands can be rejected Part III: Implementation Approaches Part IV: Thinking Differently This post assumes that you know what Event Sourcing is. If not then I recommend that you read this Document from Greg Young. Keep Read and Write Model separate when using CQRS As I mentioned earlier: The basic definition of Event Sourcing is that you reconstitute the state of the application by replaying all past events. Event Sourcing does not necessarily mean that CQRS needs to be used although often it might be very useful. CQRS splits the application in two parts: the Read Model and the Write Model. This allows for better scaling and separation of concern. If CQRS is used it is important to really keep the two sides separate. You might ask: “so what, where’s the problem”? The problem is, that it might be necessary to rethink the application’s design in order to achieve this. Let’s look at an example. Assume a system that manages memberships. Each membership states the year and references a member. The RESTful service might look like this (Note that for the sake of simplicity I do not use HATEOS and other fancy stuff): POST /memberships { &quot;year&quot;: 2020, &quot;memberId&quot;: &quot;123&quot; } Creating and saving a membership could look as follows. Note that creating a Membership automatically generates an ID for us: public class MembershipApplication { public MembershipId createMembership() { Membership m = new Membership(memberId, year); repository.save(m); return m.getId(); } } Now the business defines a business rule which states that there can only be one membership per member and year. In a “normal” DDD application one could do the following: public class MembershipApplication { public MembershipId createMembership(MemberId memberId, int year) throws AlreadyMemberForGivenYear { Collection&amp;lt;Membership&amp;gt; memberships = repository.find(memberId, year); if(!memberships.isEmpty()) { throw new AlreadyMemberForGivenYear(); } Membership m = new Membership(memberId, year); repository.save(m); return m.getId(); } } Well ok, this check would probably belong in a domain service and not an application service. But that is not the point. Also to actually guarantee that there won’t be two memberships for the same member and year this would not be sufficient in a classic DDD application neither. In a concurrency situation the isEmpty() could be OK but then another thread saves the membership just after the check. This could be fixed with a unique constraint on the database. But then we are actually implementing a business rule in the infrastructure. When using CQRS the problem becomes even more obvious: You cannot make a unique constraint on an Event Store for this check. Sure, there are usually some unique constraints in an Event Store. E.g. the event ID or the sequence numbers. But they are not specific for a business requirement. Also in CQRS you have to assume that the store will be up-to-date probably hours after an aggregate has been modified. Other reasons to use CQRS are scalability and availability. By using the read model each time a new membership gets created there is load generated on the Read Model. Further the Write Model’s performance and availability depends on the Read Model which is not desirable. One solution is using a MembershipId that combines memberId and year: public class MembershipId { private final MemberId memberId; private final int year; // ... public String toString() { return memberId.toString() + &quot;-&quot; + year; } } So the MembershipId used to store the aggregate might be 123-2020. In order to check if a membership for the given member exists one can just try to load it: public class MembershipApplication { public MembershipId createMembership(MemberId memberId, int year) throws AlreadyMemberForGivenYear { Membership m = new Membership(memberId, year); Membership memberships = repository.get(membership.getId()); if(memberships != null) { throw new AlreadyMemberForGivenYear(); } repository.save(m); return m.getId(); } } It would be necessary to think about save() and how it behaves if there exists an aggregate with this ID already. One option would be to make two different methods like create() and update(). create() would throw an exception if an aggregate with the given ID already exists. There is another disadvantage of using such a combined key: If the business suddenly decides that there may now be multiple memberships for the same member and year then what? This would mean that we have to change the key of all our Membership aggregates. Thinking differently I’m not saying the problem here applies only to Event Sourced applications with CQRS. However I think the fact that it is not possible to randomly search the database forces you to think differently and “harder” because you simply cannot do some dirty hacks. This will eventually lead to a better solution as I will explain now: In the Membership Example a new aggregate could be added: Member. This allows to do the following: public class MembershipApplication { public MembershipId createMembership(MemberId memberId, int year) throws AlreadyMemberForGivenYear { Member member = memberRepository.get(memberId); if(member == null) { member = new Member(memberId); } Membership membership = new Membership(); member.addMembership(membership); // may throw AlreadyMemberForGivenYear memberRepository.save(member); return membership; } } I think this is much better. The business rule can now be fully implemented in the domain. We do not need a combined key that must be changed if the business rule changes in the future. There is however something to be aware of in the example: I made Membership an entity of the Member aggregate. When a client creates a new Membership by posting to /memberships we want to return the ID of the newly created membership in order to access it afterwards by using GET on /memberships/{membershipId}. It would be possible to still return a combined key in the RESTfull service. So we could return again something like 123-2020. Using this key it is possible to extract the member’s ID, load the Member aggregate and then locate the membership using the year in order to update then the membership. However image again that the business rule changes, and it is now possible to have multiple memberships for the same member and year. The ID would change. Any system that is holding a reference to the membership (for example the accounting system) will break. this can fixed by generating something like a UUID for each membership. When posting to /memberships the service would return for example e06d8423-f90c-4c59-839e-e71ade68f37f. Reading is not a problem, because the Read Model can contain this ID and it is possible to simply look it up. But now there is a problem when updating a membership: Updating is a write operation so it is only allowed to use the Write Model. But how can we access the Membership if we don’t know the Member’s ID? A simple solution is to still use a combined ID but this time a combination of the MemberId and the generated MembershipId. E.g. 123@e06d8423-f90c-4c59-839e-e71ade68f37f (I’m using ‘@’ here as a separator because the UUID already contains dashes). This ID is stable and allows to change the business rules for adding Memberships without affecting the MembershipId If you’re company insists in using a specific format for IDs then you would have to do some kind of translation from your combined ID to one that satisfies your companies rules. Towards Self Contained Systems A Self Contained System (SCS) has the following characteristics (among others, see here); Each SCS is an autonomous web application. […] Communication with other SCSs or 3rd party systems is asynchronous wherever possible. […] Let’s look again at our membership service: public class MembershipApplication { public MembershipId createMembership(MemberId memberId, int year) throws AlreadyMemberForGivenYear { Member member = memberRepository.get(memberId); if(member == null) { member = new Member(memberId); } MembershipId membershipId = member.addMembership(memberId, year); // may throw AlreadyMemberForGivenYear memberRepository.save(member); return membershipId; } } The service first checks if a Member with the given ID exists. If not, it creates a new one. This is one possibility. The problem is that a client might provide a non-existent memberId. The service could check whether the Member actually exists by calling the member system using a RESTfull service. The example uses the MemberPort for this (I use the term port here to emphasize the Ports and Adapter Architecture, aka Hexagonal). public class MembershipApplication { public MembershipId createMembership(MemberId memberId, int year) throws AlreadyMemberForGivenYear, MemberNotFoundException { Member member = memberRepository.get(memberId); if(member == null) { if(memberPort.memberExists(memberId)) { member = new Member(memberId); } else { throw new MemberNotFoundException(); } } MembershipId membershipId = member.addMembership(memberId, year); // may throw AlreadyMemberForGivenYear memberRepository.save(member); return membershipId; } } This only replicates the member if it exists. This is fine, but it is not really self contained. We should communicate asynchronously with other systems. So the solution would be to subscribe to member events and replicate members when receiving events. This way the system is very independent, and it is possible to add memberships event if the member system itself is not available. Here’s a sketch of how this could look like: public class MembershipApplication { public MembershipId createMembership(MemberId memberId, int year) throws AlreadyMemberForGivenYear, MemberNotFoundException { Member member = memberRepository.get(memberId); if(member == null) { throw new MemberNotFoundException(); } MembershipId membershipId = member.addMembership(memberId, year); // may throw AlreadyMemberForGivenYear memberRepository.save(member); return membershipId; } // handle events from member system and keep members up-to-date private onEvent(MemberEvent memberEvent) { // [...] memberRepository.save(member); } } How you process exactly the member events depends of course on your messaging system and framework. This is just a sketch. It is however important to note that updating the members is done in the Write Side of your application. It is not to be confused with the event processing that it probably going on elsewhere in this application in order to update the Read Model. Summary When implementing an event-sourced application with CQRS for the first time the fact that you must not access the Read Model when writing may be unfamiliar. However I think it will lead to a better design in respect to DDD eventually. This is of course my personal and highly subjective opinion.</summary></entry><entry><title type="html">Event Sourcing - Implementation Approaches</title><link href="http://localhost:4000/blog/2020/03/eventsourcing-implementation-approaches" rel="alternate" type="text/html" title="Event Sourcing - Implementation Approaches" /><published>2020-03-22T00:00:00+01:00</published><updated>2020-03-22T00:00:00+01:00</updated><id>http://localhost:4000/blog/2020/03/eventsourcing-implementation-approaches</id><content type="html" xml:base="http://localhost:4000/blog/2020/03/eventsourcing-implementation-approaches">&lt;p&gt;This is the third part in a series about Event Sourcing. In the past year I was involved in the development of a Java application using Event Sourcing. Actually we did it twice using different approaches. In this post I’d like to share some thoughts on different implementation approaches. See also my other post on Event Sourcing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Part I: &lt;a href=&quot;/blog/2020/02/eventsourcing-notes-on-eventstores&quot;&gt;Notes on Event Stores&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Part II: &lt;a href=&quot;/blog/2020/02/eventsourcing-notes-on-commands&quot;&gt;Commands can be rejected&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Part III: &lt;a href=&quot;/blog/2020/03/eventsourcing-implementation-approaches&quot;&gt;Implementation Approaches&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Part IV: &lt;a href=&quot;/blog/2020/05/eventsourcing-thinking-differently&quot;&gt;Thinking Differently&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post assumes that you know what Event Sourcing is. If not then I recommend that you read &lt;a href=&quot;https://cqrs.files.wordpress.com/2010/11/cqrs_documents.pdf&quot;&gt;this Document from Greg Young&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;There is not just one way to implement an Event Sourced application. Event Sourced applications can be very different. They can range from Banking to Source Code Management (like Git or Subversion). Different domains have different requirements.&lt;/p&gt;

&lt;p&gt;Also Event Sourcing is often mentioned along with Domain Driven Design which is not really a requirement but it fits very well and I for myself have always implemented Event Sourcing in the context of DDD applications.&lt;/p&gt;

&lt;p&gt;When we’ve implemented our first Event Sourced application we’ve used the “Classic Approach” with an Event Store that we’ve implemented ourselves. We later decided that implementing an own Event Store is not the best idea and started to use &lt;a href=&quot;https://akka.io/&quot;&gt;Akka&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Akka is an Actor Framework. Actors cannot be accessed directly. It is only possible to send messages to them. This made it necessary for us to switch to the second approach.&lt;/p&gt;

&lt;p&gt;In both cases we maintained a &lt;a href=&quot;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&quot;&gt;Clean Architecture&lt;/a&gt; which means (among other things) that the domain logic must not depend on a framework (Akka in our case). I will write another post on how this can be achieved. This post will only focus on the two approaches on a higher level.&lt;/p&gt;

&lt;h1 id=&quot;approach-i-the-classic-approach&quot;&gt;Approach I: The Classic Approach&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.goodreads.com/book/show/15756865-implementing-domain-driven-design&quot;&gt;IDDD book&lt;/a&gt; describes what I call the “Classic Approach” with DDD. The classic approach with DDD works more or less like this (this is my own variation and does not reflect 100% what is shown in the iDDD book):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uml/49423987f125b2b8ac7c59643b0dbc0e.svg&quot; alt=&quot;PlantUML SVG diagram&quot; class=&quot;plantuml&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The user invokes the withdraw operation&lt;/li&gt;
  &lt;li&gt;The Application Service uses the Repository to load the Account&lt;/li&gt;
  &lt;li&gt;In order to load the account the Repository reads the stream of past events of the given account from the EventStore.&lt;/li&gt;
  &lt;li&gt;It then creates an instance of the Account Aggregate and passes in the stream of events&lt;/li&gt;
  &lt;li&gt;The Account Aggregate applies all events in the stream in order to reconstitute its current state&lt;/li&gt;
  &lt;li&gt;Now the Application Service can invoke the withdraw-Method on the Account Aggregate&lt;/li&gt;
  &lt;li&gt;The account emits a new event that states that money has been withdrawn&lt;/li&gt;
  &lt;li&gt;The Application Service tells the Repository to save the Account Object&lt;/li&gt;
  &lt;li&gt;The Repository gets all newly emitted events from the Aggregate&lt;/li&gt;
  &lt;li&gt;The Repository appends the events to the appropriate stream in the Event Store&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It uses a classic DDD approach using a Repository to load Aggregates. The explicit call to &lt;code class=&quot;highlighter-rouge&quot;&gt;save()&lt;/code&gt; is not compliant with the &lt;a href=&quot;https://domainlanguage.com/wp-content/uploads/2016/05/DDD_Reference_2015-03.pdf&quot;&gt;original definition by Eric Evans&lt;/a&gt; which states that a Repository is “a service that can provide the illusion of an in-memory collection of all objects of that aggregate’s root type”. But this problem exists with other implementations as well and is kind of an “accepted violation” of DDD :-)&lt;/li&gt;
  &lt;li&gt;The Aggregate is loaded from the Event Store every time a new request is processed. This could be a performance issue. In such cases snapshots may be used (refere to &lt;a href=&quot;https://cqrs.files.wordpress.com/2010/11/cqrs_documents.pdf&quot;&gt;Greg Young’s Paper&lt;/a&gt; if you don’t konw what snapshots are)&lt;/li&gt;
  &lt;li&gt;The fact that there might be multiple concurrent requests makes it necessary to have some kind of locking in order to maintain consistency in the aggregate. Check out &lt;a href=&quot;/blog/2020/02/eventsourcing-notes-on-eventstores&quot;&gt;my other post about Event Stores&lt;/a&gt; if you want to know more.&lt;/li&gt;
  &lt;li&gt;The User’s invocation is shown as a synchronous one. It could be asynchronous but still loading the aggregate, withdrawing the money and saving the aggregate occupies one thread.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Application Service’s code could look like this (ignoring error handling etc.):&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccountRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withdraw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        
        &lt;span class=&quot;nc&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAccount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accountId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withdraw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;approach-ii-the-reactive-approach&quot;&gt;Approach II: The Reactive Approach&lt;/h1&gt;

&lt;p&gt;In the Reactive Approach you cannot invoke methods directly on an Aggregate. You can only send messages to an actor which goes with the &lt;a href=&quot;https://www.reactivemanifesto.org/&quot;&gt;reactive manifesto&lt;/a&gt; which states:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Reactive Systems rely on asynchronous message-passing to establish a boundary between components that ensures loose coupling, isolation and location transparency.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our system we implemented this approach using &lt;a href=&quot;https://akka.io/&quot;&gt;Akka&lt;/a&gt; and &lt;a href=&quot;https://doc.akka.io/docs/akka/current/persistence.html&quot;&gt;Akka Persistence&lt;/a&gt;. Akka is an implementation of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Actor_model&quot;&gt;Actor Model&lt;/a&gt; which was first described in 1973 by Carl Hewitt. Akka is implemented in Scala but has a Java API. A similar implementation could probably achieved by using &lt;a href=&quot;https://vlingo.io/&quot;&gt;vlingo&lt;/a&gt; which is another implementation of the Actor Model. At the time we looked at it we didn’t know vlingo so we went for Akka. There is another framework which is called &lt;a href=&quot;https://axoniq.io/&quot;&gt;Axon Framework&lt;/a&gt; and it does use a reactive approach as well.&lt;/p&gt;

&lt;p&gt;Instead of a Repository a Command Gateway is used. A Command Gateway receives a command and sends it to the aggregate.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uml/544c418a0bb4162ff70d9ef866c0172c.svg&quot; alt=&quot;PlantUML SVG diagram&quot; class=&quot;plantuml&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The user invokes the withdraw operation&lt;/li&gt;
  &lt;li&gt;The Application Services creates an appropriate command message and invokes the Command Gateway&lt;/li&gt;
  &lt;li&gt;The Command Gateway sends the command message to the Actor (this is a potential remote invocation)&lt;/li&gt;
  &lt;li&gt;The (persistent) Actor receives the command message. If the actor does not exist yet in memory then it will be loaded using the persisted events from the Event Store. How this happens exactly is left to the Actor Framework. The important thing here is to note that it is not necessarily reloaded on each request. When the Actor’s Events are replayed it also forwards them to the actual Aggregate it represents. The Aggregate could actually be implemented directly in the Actor class but we decided to separate this (Clean Architecture).&lt;/li&gt;
  &lt;li&gt;The Actor invokes the withdraw operation on the Aggregate. The Aggregate returns the events which are a result of this operation.&lt;/li&gt;
  &lt;li&gt;The Actor persists these returned events using the Event Store&lt;/li&gt;
  &lt;li&gt;At some point the Actor will send a confirmation that the command has been processed&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The invocation is asynchronous but there is a response for the command eventually. How a client can correlate such a response with his original request is left open here. A polling or notification mechanism can be used for this purpose.&lt;/li&gt;
  &lt;li&gt;There is only one actor for each aggregate (a specific instance like Account “X”). There may be multiple actors for each aggregate type.&lt;/li&gt;
  &lt;li&gt;No matter how many commands are sent to the actor “X”: The Actor “X” will always only process one message at a time. No additional locking is required to ensure the aggregate’s invariants.&lt;/li&gt;
  &lt;li&gt;In order to achieve this in a deployment with multiple nodes something like “sharding” or “partitioning” is required where each shard acts as the single source for a set of aggregates.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Application Service’s code could look like this (ignoring error handling etc.):&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccountCommandGateway&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withdraw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;WithrawCommand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WithdrawCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accountId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withdraw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What’s interesting is that this is actually shorter than the Classic Approach. No explicit save is required in the ApplicationService.&lt;/p&gt;

&lt;h1 id=&quot;comparison&quot;&gt;Comparison&lt;/h1&gt;

&lt;p&gt;There is significant interest today in Reactive Systems and reactive Programming. I’m not qualified to make any statements about how they perform etc. At least from theoretical standpoint they may perform better – at least in certain cases and depending on the definition of “performance”. Messaging etc. are definitely an overhead when compared to direct method invocations. But as soon as you need scalability and high throughput the Reactive Approach gets more interesting.&lt;/p&gt;

&lt;p&gt;From a programmers standpoint the classic approach looks probably more familiar and testing is simpler.&lt;/p&gt;

&lt;p&gt;In respect to the reactive appraoch the main work was to implement the basic framework we build around Akka in order to achieve a Clean Architecture. For me it was difficult to get into the message driven and asynchronous thinking. Also testing of such systems is not simple and you have to get accustomed first. Now that we have this framework we can focus on business features. Also as you can see in the code snippet some thing even get simpler.&lt;/p&gt;</content><author><name>Oliver Jaun</name></author><summary type="html">This is the third part in a series about Event Sourcing. In the past year I was involved in the development of a Java application using Event Sourcing. Actually we did it twice using different approaches. In this post I’d like to share some thoughts on different implementation approaches. See also my other post on Event Sourcing: Part I: Notes on Event Stores Part II: Commands can be rejected Part III: Implementation Approaches Part IV: Thinking Differently This post assumes that you know what Event Sourcing is. If not then I recommend that you read this Document from Greg Young. Introduction There is not just one way to implement an Event Sourced application. Event Sourced applications can be very different. They can range from Banking to Source Code Management (like Git or Subversion). Different domains have different requirements. Also Event Sourcing is often mentioned along with Domain Driven Design which is not really a requirement but it fits very well and I for myself have always implemented Event Sourcing in the context of DDD applications. When we’ve implemented our first Event Sourced application we’ve used the “Classic Approach” with an Event Store that we’ve implemented ourselves. We later decided that implementing an own Event Store is not the best idea and started to use Akka. Akka is an Actor Framework. Actors cannot be accessed directly. It is only possible to send messages to them. This made it necessary for us to switch to the second approach. In both cases we maintained a Clean Architecture which means (among other things) that the domain logic must not depend on a framework (Akka in our case). I will write another post on how this can be achieved. This post will only focus on the two approaches on a higher level. Approach I: The Classic Approach The IDDD book describes what I call the “Classic Approach” with DDD. The classic approach with DDD works more or less like this (this is my own variation and does not reflect 100% what is shown in the iDDD book): The user invokes the withdraw operation The Application Service uses the Repository to load the Account In order to load the account the Repository reads the stream of past events of the given account from the EventStore. It then creates an instance of the Account Aggregate and passes in the stream of events The Account Aggregate applies all events in the stream in order to reconstitute its current state Now the Application Service can invoke the withdraw-Method on the Account Aggregate The account emits a new event that states that money has been withdrawn The Application Service tells the Repository to save the Account Object The Repository gets all newly emitted events from the Aggregate The Repository appends the events to the appropriate stream in the Event Store Note: It uses a classic DDD approach using a Repository to load Aggregates. The explicit call to save() is not compliant with the original definition by Eric Evans which states that a Repository is “a service that can provide the illusion of an in-memory collection of all objects of that aggregate’s root type”. But this problem exists with other implementations as well and is kind of an “accepted violation” of DDD :-) The Aggregate is loaded from the Event Store every time a new request is processed. This could be a performance issue. In such cases snapshots may be used (refere to Greg Young’s Paper if you don’t konw what snapshots are) The fact that there might be multiple concurrent requests makes it necessary to have some kind of locking in order to maintain consistency in the aggregate. Check out my other post about Event Stores if you want to know more. The User’s invocation is shown as a synchronous one. It could be asynchronous but still loading the aggregate, withdrawing the money and saving the aggregate occupies one thread. The Application Service’s code could look like this (ignoring error handling etc.): public class ApplicationService { private AccountRepository repository; // ... public void withdraw(String accountId, int amount) { Account a = repository.getAccount(accountId); a.withdraw(amount); repository.save(a); } } Approach II: The Reactive Approach In the Reactive Approach you cannot invoke methods directly on an Aggregate. You can only send messages to an actor which goes with the reactive manifesto which states: Reactive Systems rely on asynchronous message-passing to establish a boundary between components that ensures loose coupling, isolation and location transparency. In our system we implemented this approach using Akka and Akka Persistence. Akka is an implementation of the Actor Model which was first described in 1973 by Carl Hewitt. Akka is implemented in Scala but has a Java API. A similar implementation could probably achieved by using vlingo which is another implementation of the Actor Model. At the time we looked at it we didn’t know vlingo so we went for Akka. There is another framework which is called Axon Framework and it does use a reactive approach as well. Instead of a Repository a Command Gateway is used. A Command Gateway receives a command and sends it to the aggregate. The user invokes the withdraw operation The Application Services creates an appropriate command message and invokes the Command Gateway The Command Gateway sends the command message to the Actor (this is a potential remote invocation) The (persistent) Actor receives the command message. If the actor does not exist yet in memory then it will be loaded using the persisted events from the Event Store. How this happens exactly is left to the Actor Framework. The important thing here is to note that it is not necessarily reloaded on each request. When the Actor’s Events are replayed it also forwards them to the actual Aggregate it represents. The Aggregate could actually be implemented directly in the Actor class but we decided to separate this (Clean Architecture). The Actor invokes the withdraw operation on the Aggregate. The Aggregate returns the events which are a result of this operation. The Actor persists these returned events using the Event Store At some point the Actor will send a confirmation that the command has been processed Note: The invocation is asynchronous but there is a response for the command eventually. How a client can correlate such a response with his original request is left open here. A polling or notification mechanism can be used for this purpose. There is only one actor for each aggregate (a specific instance like Account “X”). There may be multiple actors for each aggregate type. No matter how many commands are sent to the actor “X”: The Actor “X” will always only process one message at a time. No additional locking is required to ensure the aggregate’s invariants. In order to achieve this in a deployment with multiple nodes something like “sharding” or “partitioning” is required where each shard acts as the single source for a set of aggregates. The Application Service’s code could look like this (ignoring error handling etc.): public class ApplicationService { private AccountCommandGateway gateway; // ... public void withdraw(String accountId, int amount) { WithrawCommand command = new WithdrawCommand(accountId, amount); gateway.withdraw(command); } } What’s interesting is that this is actually shorter than the Classic Approach. No explicit save is required in the ApplicationService. Comparison There is significant interest today in Reactive Systems and reactive Programming. I’m not qualified to make any statements about how they perform etc. At least from theoretical standpoint they may perform better – at least in certain cases and depending on the definition of “performance”. Messaging etc. are definitely an overhead when compared to direct method invocations. But as soon as you need scalability and high throughput the Reactive Approach gets more interesting. From a programmers standpoint the classic approach looks probably more familiar and testing is simpler. In respect to the reactive appraoch the main work was to implement the basic framework we build around Akka in order to achieve a Clean Architecture. For me it was difficult to get into the message driven and asynchronous thinking. Also testing of such systems is not simple and you have to get accustomed first. Now that we have this framework we can focus on business features. Also as you can see in the code snippet some thing even get simpler.</summary></entry><entry><title type="html">Event Sourcing - Commands can be rejected</title><link href="http://localhost:4000/blog/2020/02/eventsourcing-notes-on-commands" rel="alternate" type="text/html" title="Event Sourcing - Commands can be rejected" /><published>2020-02-26T00:00:00+01:00</published><updated>2020-02-26T00:00:00+01:00</updated><id>http://localhost:4000/blog/2020/02/eventsourcing-notes-on-commands</id><content type="html" xml:base="http://localhost:4000/blog/2020/02/eventsourcing-notes-on-commands">&lt;p&gt;This is the second part in a series about Event Sourcing. In the past year I was involved in the development of a Java application using Event Sourcing. Actually we did it twice using two different approaches. In this post I’d like to share some thoughts about commands in the context of CQRS and Event Sourcing. See also my other post on Event Sourcing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Part I: &lt;a href=&quot;/blog/2020/02/eventsourcing-notes-on-eventstores&quot;&gt;Notes on Event Stores&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Part II: &lt;a href=&quot;/blog/2020/02/eventsourcing-notes-on-commands&quot;&gt;Commands can be rejected&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Part III: &lt;a href=&quot;/blog/2020/03/eventsourcing-implementation-approaches&quot;&gt;Implementation Approaches&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Part IV: &lt;a href=&quot;/blog/2020/05/eventsourcing-thinking-differently&quot;&gt;Thinking Differently&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post assumes that you know what Event Sourcing is. If not then I recommend that you read &lt;a href=&quot;https://cqrs.files.wordpress.com/2010/11/cqrs_documents.pdf&quot;&gt;this Document from Greg Young&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;difference-between-cqs-and-cqrs&quot;&gt;Difference between CQS and CQRS&lt;/h1&gt;

&lt;p&gt;Bertrand Meyer described the Command Query Segregation Pattern (CQS): “It states that every method should either be a command that performs an action, or a query that returns data to the caller, but not both” (see &lt;a href=&quot;https://en.wikipedia.org/wiki/Command%E2%80%93query_separation&quot;&gt;Wikipedia&lt;/a&gt;).&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c1&quot;&gt;// mutates state but does not return anything&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// returns a value but does not mutate state&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So what is CQRS then? In Command Query Responsibility Segregation (CQRS) the application is split into a query/read and a command/write side which allows for better scaling and separation of concern. Usually reading is performed more often than writing. The query side can be optimized for reading and even be deployed independently of the command side (note that the arrows in the diagram show dependencies not data flow).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uml/3fa32dbb378b78559cd8537e3c97197a.svg&quot; alt=&quot;PlantUML SVG diagram&quot; class=&quot;plantuml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In eventsourced applications CQRS can make a lot of sense. With just Event Sourcing it can be difficult and/or slow to perform e.g. queries on your event streams. With CQRS the query side builds so called Projections (or Read/Query Models) using the events produced by the command side. This is usually done asynchronously. One important consequence of this is that the query side might not represent the current state. For example a UI that writes some data and reads them shortly afterwards might not read what it has just written. This has to be taken into account. The advantages are separation of concern and performance among others.&lt;/p&gt;

&lt;p&gt;Be aware of the fact that the command side must not access the query side! Note that there is no such arrow in the diagram.&lt;/p&gt;

&lt;h1 id=&quot;commands-can-fail-or-be-rejected&quot;&gt;Commands can fail or be rejected&lt;/h1&gt;

&lt;p&gt;It may seem trivial but it’s important to note that a command in CQRS may fail or it might be rejected. Greg Young’s &lt;a href=&quot;https://github.com/gregoryyoung/m-r/tree/master/SimpleCQRS&quot;&gt;CQRS Example Application&lt;/a&gt; does clearly show this:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InventoryItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AggregateRoot&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ChangeName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsNullOrEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;newName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;ApplyChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InventoryItemRenamed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The aggregate root &lt;code class=&quot;highlighter-rouge&quot;&gt;InventoryItem&lt;/code&gt; simply throws an &lt;code class=&quot;highlighter-rouge&quot;&gt;ArgumentException&lt;/code&gt; if &lt;code class=&quot;highlighter-rouge&quot;&gt;newName&lt;/code&gt; is null. No event is persisted in this case.&lt;/p&gt;

&lt;p&gt;An event in contrast states a fact, something that happened. An event cannot be rejected.&lt;/p&gt;

&lt;p&gt;Let’s look at an example where a command is processed and finally an event is emitted: If a user withdraws 10 CHF from his account which has a balance of 42 CHF then everything is fine. An event will be emitted that states that 10 CHF have been withdrawn. Note that the following sequence diagrams are very schematic and do not show UIs etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uml/55b5c82fb49fcf47bac0f57f79456466.svg&quot; alt=&quot;PlantUML SVG diagram&quot; class=&quot;plantuml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If the user tries to withdraw 50 CHF from his account that has a balance of 42 CHF then the command to do so must be rejected. There is no event stored in the Event Store. Of course business people might still decide that they want such attempts to be stored but usually this is nothing to be stored in an Event Store. It could be stored in a log file or a special table etc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uml/4fee7d92186a4aeb1b53b0f4ea3b7677.svg&quot; alt=&quot;PlantUML SVG diagram&quot; class=&quot;plantuml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;My reasoning is that in eventsourcing events are primarily used to reconstitute the state of the system. A rejected command is not needed to reconstitute state.&lt;/p&gt;

&lt;p&gt;In Microsoft’s &lt;a href=&quot;http://cqrsjourney.github.io/&quot;&gt;a CQRS Journey&lt;/a&gt; there is an example involving a seat reservation: A user “registers to a conference” via an “Order” Aggregate. The Order Aggregate emitts an “OrderPlaced” Event which is then acted upon by the Process Manager which calls the “ConferenceSeatsAvailabilityAggregate” to make a seat reservation. If the reservation succeeds a “ReservationAccepted” Event is emitted. If it fails a “ResevationRejected” Event is emitted. I don’t really see why it is necessary to use events for this. The command could just be rejected. In a later stage they change the example to put the seats that could not be reserved to a waiting list. OK, that could be a reason but then this could also be done by the ProcessManager when he gets the outcome of the command. And then one could also argue that the outcome of a command is also a kind of event. This is a valid argument but I still think it is not necessary to persist this kind of “command-events”.&lt;/p&gt;

&lt;p&gt;Commands may be executed synchronous or asynchronously. This does not change the fact that they can be rejected of course. In case of asynchronous command execution It is necessary to have a means to get a response for a command. The caller might want to know the reason for the rejection in order to display it in a UI etc. This could be done by polling for the state of command execution (a more elegant solution might be to use to user technologies like &lt;a href=&quot;https://en.wikipedia.org/wiki/Server-sent_events&quot;&gt;Server Sent Events&lt;/a&gt; etc. in order to avoid polling). As in synchronous execution there will probably a timeout for polling the state. One solution in such cases is to execute the command again which could lead to problems if the system called is not idempotent (&lt;a href=&quot;/blog/2019/09/Idempotence&quot;&gt;see my post on Idempotence&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uml/876b2f024204e310c4897dd8acfddc11.svg&quot; alt=&quot;PlantUML SVG diagram&quot; class=&quot;plantuml&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;Regardless of whether commands are sent synchronously or asynchronously to the write side of a CQRS application they may be rejected or they may fail. The caller has to react appropriately.&lt;/p&gt;</content><author><name>Oliver Jaun</name></author><summary type="html">This is the second part in a series about Event Sourcing. In the past year I was involved in the development of a Java application using Event Sourcing. Actually we did it twice using two different approaches. In this post I’d like to share some thoughts about commands in the context of CQRS and Event Sourcing. See also my other post on Event Sourcing: Part I: Notes on Event Stores Part II: Commands can be rejected Part III: Implementation Approaches Part IV: Thinking Differently This post assumes that you know what Event Sourcing is. If not then I recommend that you read this Document from Greg Young. Difference between CQS and CQRS Bertrand Meyer described the Command Query Segregation Pattern (CQS): “It states that every method should either be a command that performs an action, or a query that returns data to the caller, but not both” (see Wikipedia). // mutates state but does not return anything public void command(int input) { this.state = input; } // returns a value but does not mutate state public int query() { return state; } So what is CQRS then? In Command Query Responsibility Segregation (CQRS) the application is split into a query/read and a command/write side which allows for better scaling and separation of concern. Usually reading is performed more often than writing. The query side can be optimized for reading and even be deployed independently of the command side (note that the arrows in the diagram show dependencies not data flow). In eventsourced applications CQRS can make a lot of sense. With just Event Sourcing it can be difficult and/or slow to perform e.g. queries on your event streams. With CQRS the query side builds so called Projections (or Read/Query Models) using the events produced by the command side. This is usually done asynchronously. One important consequence of this is that the query side might not represent the current state. For example a UI that writes some data and reads them shortly afterwards might not read what it has just written. This has to be taken into account. The advantages are separation of concern and performance among others. Be aware of the fact that the command side must not access the query side! Note that there is no such arrow in the diagram. Commands can fail or be rejected It may seem trivial but it’s important to note that a command in CQRS may fail or it might be rejected. Greg Young’s CQRS Example Application does clearly show this: public class InventoryItem : AggregateRoot { // ... public void ChangeName(string newName) { if (string.IsNullOrEmpty(newName)) throw new ArgumentException(&quot;newName&quot;); ApplyChange(new InventoryItemRenamed(_id, newName)); } // ... } The aggregate root InventoryItem simply throws an ArgumentException if newName is null. No event is persisted in this case. An event in contrast states a fact, something that happened. An event cannot be rejected. Let’s look at an example where a command is processed and finally an event is emitted: If a user withdraws 10 CHF from his account which has a balance of 42 CHF then everything is fine. An event will be emitted that states that 10 CHF have been withdrawn. Note that the following sequence diagrams are very schematic and do not show UIs etc. If the user tries to withdraw 50 CHF from his account that has a balance of 42 CHF then the command to do so must be rejected. There is no event stored in the Event Store. Of course business people might still decide that they want such attempts to be stored but usually this is nothing to be stored in an Event Store. It could be stored in a log file or a special table etc. My reasoning is that in eventsourcing events are primarily used to reconstitute the state of the system. A rejected command is not needed to reconstitute state. In Microsoft’s a CQRS Journey there is an example involving a seat reservation: A user “registers to a conference” via an “Order” Aggregate. The Order Aggregate emitts an “OrderPlaced” Event which is then acted upon by the Process Manager which calls the “ConferenceSeatsAvailabilityAggregate” to make a seat reservation. If the reservation succeeds a “ReservationAccepted” Event is emitted. If it fails a “ResevationRejected” Event is emitted. I don’t really see why it is necessary to use events for this. The command could just be rejected. In a later stage they change the example to put the seats that could not be reserved to a waiting list. OK, that could be a reason but then this could also be done by the ProcessManager when he gets the outcome of the command. And then one could also argue that the outcome of a command is also a kind of event. This is a valid argument but I still think it is not necessary to persist this kind of “command-events”. Commands may be executed synchronous or asynchronously. This does not change the fact that they can be rejected of course. In case of asynchronous command execution It is necessary to have a means to get a response for a command. The caller might want to know the reason for the rejection in order to display it in a UI etc. This could be done by polling for the state of command execution (a more elegant solution might be to use to user technologies like Server Sent Events etc. in order to avoid polling). As in synchronous execution there will probably a timeout for polling the state. One solution in such cases is to execute the command again which could lead to problems if the system called is not idempotent (see my post on Idempotence) Summary Regardless of whether commands are sent synchronously or asynchronously to the write side of a CQRS application they may be rejected or they may fail. The caller has to react appropriately.</summary></entry><entry><title type="html">Event Sourcing - Notes on Event Stores</title><link href="http://localhost:4000/blog/2020/02/eventsourcing-notes-on-eventstores" rel="alternate" type="text/html" title="Event Sourcing - Notes on Event Stores" /><published>2020-02-23T00:00:00+01:00</published><updated>2020-02-23T00:00:00+01:00</updated><id>http://localhost:4000/blog/2020/02/eventsourcing-notes-on-eventstores</id><content type="html" xml:base="http://localhost:4000/blog/2020/02/eventsourcing-notes-on-eventstores">&lt;p&gt;This is the first part in a series about Event Sourcing. In the past year I was involved in the development of a Java application using Event Sourcing. Actually we did it twice using different approaches. In this post I’d like to share some thoughts about Event Stores. See also my other post on Event Sourcing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Part I: &lt;a href=&quot;/blog/2020/02/eventsourcing-notes-on-eventstores&quot;&gt;Notes on Event Stores&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Part II: &lt;a href=&quot;/blog/2020/02/eventsourcing-notes-on-commands&quot;&gt;Commands can be rejected&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Part III: &lt;a href=&quot;/blog/2020/03/eventsourcing-implementation-approaches&quot;&gt;Implementation Approaches&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Part IV: &lt;a href=&quot;/blog/2020/05/eventsourcing-thinking-differently&quot;&gt;Thinking Differently&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post assumes that you know what Event Sourcing is. If not then I recommend that you read &lt;a href=&quot;https://cqrs.files.wordpress.com/2010/11/cqrs_documents.pdf&quot;&gt;this Document from Greg Young&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-is-an-event-store&quot;&gt;What is an Event Store?&lt;/h2&gt;

&lt;p&gt;Martin Fowler writes about different Event-Driven Patterns in &lt;a href=&quot;https://martinfowler.com/articles/201701-event-driven.html?&quot;&gt;this article&lt;/a&gt;. For example he mentions &lt;em&gt;Event Notification&lt;/em&gt; which is used to notify other systems of a change. Events in event sourcing might also be used for this purpose but it is not their main purpose.&lt;/p&gt;

&lt;p&gt;In an Event Sources System events are primarily used &lt;strong&gt;to reconstitute the state of the system&lt;/strong&gt;. These events are stored in an Event Store.&lt;/p&gt;

&lt;p&gt;An Event Store must be capable of storing streams of events. An event stream is just an ordered list of events belonging to an aggregate (in terms of DDD). The events are stored in order they are emitted.&lt;/p&gt;

&lt;figure&gt;
&lt;div class=&quot;diagrams graphviz&quot;&gt;&lt;svg width=&quot;724pt&quot; height=&quot;259pt&quot; viewBox=&quot;0.00 0.00 724.00 259.00&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;
&lt;g id=&quot;graph0&quot; class=&quot;graph&quot; transform=&quot;scale(1 1) rotate(0) translate(4 255)&quot;&gt;
&lt;title&gt;G&lt;/title&gt;
&lt;polygon fill=&quot;#ffffff&quot; stroke=&quot;transparent&quot; points=&quot;-4,4 -4,-255 720,-255 720,4 -4,4&quot; /&gt;
&lt;g id=&quot;clust1&quot; class=&quot;cluster&quot;&gt;
&lt;title&gt;cluster_0&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;#d3d3d3&quot; points=&quot;8,-170 8,-243 708,-243 708,-170 8,-170&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;60&quot; y=&quot;-231&quot; font-family=&quot;Helvetica,sans-Serif&quot; font-size=&quot;10.00&quot; fill=&quot;#000000&quot;&gt;Stream for person&amp;#45;A&lt;/text&gt;
&lt;/g&gt;
&lt;g id=&quot;clust2&quot; class=&quot;cluster&quot;&gt;
&lt;title&gt;cluster_1&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;#d3d3d3&quot; points=&quot;8,-89 8,-162 348,-162 348,-89 8,-89&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;60&quot; y=&quot;-150&quot; font-family=&quot;Helvetica,sans-Serif&quot; font-size=&quot;10.00&quot; fill=&quot;#000000&quot;&gt;Stream for person&amp;#45;B&lt;/text&gt;
&lt;/g&gt;
&lt;g id=&quot;clust3&quot; class=&quot;cluster&quot;&gt;
&lt;title&gt;cluster_2&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;#d3d3d3&quot; points=&quot;8,-8 8,-81 528,-81 528,-8 8,-8&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;60.5&quot; y=&quot;-69&quot; font-family=&quot;Helvetica,sans-Serif&quot; font-size=&quot;10.00&quot; fill=&quot;#000000&quot;&gt;Stream for person&amp;#45;C&lt;/text&gt;
&lt;/g&gt;
&lt;!-- event31 --&gt;
&lt;g id=&quot;node1&quot; class=&quot;node&quot;&gt;
&lt;title&gt;event31&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;#000000&quot; points=&quot;16,-17 16,-53 160,-53 160,-17 16,-17&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;88&quot; y=&quot;-38&quot; font-family=&quot;Helvetica,sans-Serif&quot; font-size=&quot;10.00&quot; fill=&quot;#000000&quot;&gt;Event #1&lt;/text&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;88&quot; y=&quot;-27&quot; font-family=&quot;Helvetica,sans-Serif&quot; font-size=&quot;10.00&quot; fill=&quot;#000000&quot;&gt;Created&lt;/text&gt;
&lt;/g&gt;
&lt;!-- event32 --&gt;
&lt;g id=&quot;node2&quot; class=&quot;node&quot;&gt;
&lt;title&gt;event32&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;#000000&quot; points=&quot;196,-17 196,-53 340,-53 340,-17 196,-17&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;268&quot; y=&quot;-38&quot; font-family=&quot;Helvetica,sans-Serif&quot; font-size=&quot;10.00&quot; fill=&quot;#000000&quot;&gt;Event #2&lt;/text&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;268&quot; y=&quot;-27&quot; font-family=&quot;Helvetica,sans-Serif&quot; font-size=&quot;10.00&quot; fill=&quot;#000000&quot;&gt;NameChanged&lt;/text&gt;
&lt;/g&gt;
&lt;!-- event31&amp;#45;&amp;gt;event32 --&gt;
&lt;g id=&quot;edge5&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;event31&amp;#45;&amp;gt;event32&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;#000000&quot; d=&quot;M160.1757,-35C168.5199,-35 177.0771,-35 185.5445,-35&quot; /&gt;
&lt;polygon fill=&quot;#000000&quot; stroke=&quot;#000000&quot; points=&quot;185.8081,-38.5001 195.8081,-35 185.808,-31.5001 185.8081,-38.5001&quot; /&gt;
&lt;/g&gt;
&lt;!-- event33 --&gt;
&lt;g id=&quot;node3&quot; class=&quot;node&quot;&gt;
&lt;title&gt;event33&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;#000000&quot; points=&quot;376,-17 376,-53 520,-53 520,-17 376,-17&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;448&quot; y=&quot;-38&quot; font-family=&quot;Helvetica,sans-Serif&quot; font-size=&quot;10.00&quot; fill=&quot;#000000&quot;&gt;Event #3&lt;/text&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;448&quot; y=&quot;-27&quot; font-family=&quot;Helvetica,sans-Serif&quot; font-size=&quot;10.00&quot; fill=&quot;#000000&quot;&gt;Moved&lt;/text&gt;
&lt;/g&gt;
&lt;!-- event32&amp;#45;&amp;gt;event33 --&gt;
&lt;g id=&quot;edge6&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;event32&amp;#45;&amp;gt;event33&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;#000000&quot; d=&quot;M340.1757,-35C348.5199,-35 357.0771,-35 365.5445,-35&quot; /&gt;
&lt;polygon fill=&quot;#000000&quot; stroke=&quot;#000000&quot; points=&quot;365.8081,-38.5001 375.8081,-35 365.808,-31.5001 365.8081,-38.5001&quot; /&gt;
&lt;/g&gt;
&lt;!-- event21 --&gt;
&lt;g id=&quot;node4&quot; class=&quot;node&quot;&gt;
&lt;title&gt;event21&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;#000000&quot; points=&quot;16,-98 16,-134 160,-134 160,-98 16,-98&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;88&quot; y=&quot;-119&quot; font-family=&quot;Helvetica,sans-Serif&quot; font-size=&quot;10.00&quot; fill=&quot;#000000&quot;&gt;Event #1&lt;/text&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;88&quot; y=&quot;-108&quot; font-family=&quot;Helvetica,sans-Serif&quot; font-size=&quot;10.00&quot; fill=&quot;#000000&quot;&gt;Created&lt;/text&gt;
&lt;/g&gt;
&lt;!-- event22 --&gt;
&lt;g id=&quot;node5&quot; class=&quot;node&quot;&gt;
&lt;title&gt;event22&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;#000000&quot; points=&quot;196,-98 196,-134 340,-134 340,-98 196,-98&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;268&quot; y=&quot;-119&quot; font-family=&quot;Helvetica,sans-Serif&quot; font-size=&quot;10.00&quot; fill=&quot;#000000&quot;&gt;Event #2&lt;/text&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;268&quot; y=&quot;-108&quot; font-family=&quot;Helvetica,sans-Serif&quot; font-size=&quot;10.00&quot; fill=&quot;#000000&quot;&gt;JobChanged&lt;/text&gt;
&lt;/g&gt;
&lt;!-- event21&amp;#45;&amp;gt;event22 --&gt;
&lt;g id=&quot;edge4&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;event21&amp;#45;&amp;gt;event22&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;#000000&quot; d=&quot;M160.1757,-116C168.5199,-116 177.0771,-116 185.5445,-116&quot; /&gt;
&lt;polygon fill=&quot;#000000&quot; stroke=&quot;#000000&quot; points=&quot;185.8081,-119.5001 195.8081,-116 185.808,-112.5001 185.8081,-119.5001&quot; /&gt;
&lt;/g&gt;
&lt;!-- event11 --&gt;
&lt;g id=&quot;node6&quot; class=&quot;node&quot;&gt;
&lt;title&gt;event11&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;#000000&quot; points=&quot;16,-179 16,-215 160,-215 160,-179 16,-179&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;88&quot; y=&quot;-200&quot; font-family=&quot;Helvetica,sans-Serif&quot; font-size=&quot;10.00&quot; fill=&quot;#000000&quot;&gt;Event #1&lt;/text&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;88&quot; y=&quot;-189&quot; font-family=&quot;Helvetica,sans-Serif&quot; font-size=&quot;10.00&quot; fill=&quot;#000000&quot;&gt;Created&lt;/text&gt;
&lt;/g&gt;
&lt;!-- event12 --&gt;
&lt;g id=&quot;node7&quot; class=&quot;node&quot;&gt;
&lt;title&gt;event12&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;#000000&quot; points=&quot;196,-179 196,-215 340,-215 340,-179 196,-179&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;268&quot; y=&quot;-200&quot; font-family=&quot;Helvetica,sans-Serif&quot; font-size=&quot;10.00&quot; fill=&quot;#000000&quot;&gt;Event #2&lt;/text&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;268&quot; y=&quot;-189&quot; font-family=&quot;Helvetica,sans-Serif&quot; font-size=&quot;10.00&quot; fill=&quot;#000000&quot;&gt;EmailAddressChanged&lt;/text&gt;
&lt;/g&gt;
&lt;!-- event11&amp;#45;&amp;gt;event12 --&gt;
&lt;g id=&quot;edge1&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;event11&amp;#45;&amp;gt;event12&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;#000000&quot; d=&quot;M160.1757,-197C168.5199,-197 177.0771,-197 185.5445,-197&quot; /&gt;
&lt;polygon fill=&quot;#000000&quot; stroke=&quot;#000000&quot; points=&quot;185.8081,-200.5001 195.8081,-197 185.808,-193.5001 185.8081,-200.5001&quot; /&gt;
&lt;/g&gt;
&lt;!-- event13 --&gt;
&lt;g id=&quot;node8&quot; class=&quot;node&quot;&gt;
&lt;title&gt;event13&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;#000000&quot; points=&quot;376,-179 376,-215 520,-215 520,-179 376,-179&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;448&quot; y=&quot;-200&quot; font-family=&quot;Helvetica,sans-Serif&quot; font-size=&quot;10.00&quot; fill=&quot;#000000&quot;&gt;Event #3&lt;/text&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;448&quot; y=&quot;-189&quot; font-family=&quot;Helvetica,sans-Serif&quot; font-size=&quot;10.00&quot; fill=&quot;#000000&quot;&gt;NameChanged&lt;/text&gt;
&lt;/g&gt;
&lt;!-- event12&amp;#45;&amp;gt;event13 --&gt;
&lt;g id=&quot;edge2&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;event12&amp;#45;&amp;gt;event13&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;#000000&quot; d=&quot;M340.1757,-197C348.5199,-197 357.0771,-197 365.5445,-197&quot; /&gt;
&lt;polygon fill=&quot;#000000&quot; stroke=&quot;#000000&quot; points=&quot;365.8081,-200.5001 375.8081,-197 365.808,-193.5001 365.8081,-200.5001&quot; /&gt;
&lt;/g&gt;
&lt;!-- event14 --&gt;
&lt;g id=&quot;node9&quot; class=&quot;node&quot;&gt;
&lt;title&gt;event14&lt;/title&gt;
&lt;polygon fill=&quot;none&quot; stroke=&quot;#000000&quot; points=&quot;556,-179 556,-215 700,-215 700,-179 556,-179&quot; /&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;628&quot; y=&quot;-200&quot; font-family=&quot;Helvetica,sans-Serif&quot; font-size=&quot;10.00&quot; fill=&quot;#000000&quot;&gt;Event #4&lt;/text&gt;
&lt;text text-anchor=&quot;middle&quot; x=&quot;628&quot; y=&quot;-189&quot; font-family=&quot;Helvetica,sans-Serif&quot; font-size=&quot;10.00&quot; fill=&quot;#000000&quot;&gt;Died&lt;/text&gt;
&lt;/g&gt;
&lt;!-- event13&amp;#45;&amp;gt;event14 --&gt;
&lt;g id=&quot;edge3&quot; class=&quot;edge&quot;&gt;
&lt;title&gt;event13&amp;#45;&amp;gt;event14&lt;/title&gt;
&lt;path fill=&quot;none&quot; stroke=&quot;#000000&quot; d=&quot;M520.1757,-197C528.5199,-197 537.0771,-197 545.5445,-197&quot; /&gt;
&lt;polygon fill=&quot;#000000&quot; stroke=&quot;#000000&quot; points=&quot;545.8081,-200.5001 555.8081,-197 545.808,-193.5001 545.8081,-200.5001&quot; /&gt;
&lt;/g&gt;
&lt;/g&gt;
&lt;/svg&gt;
&lt;/div&gt;
  &lt;figcaption&gt;Streams in an Event Store&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;An example of an aggregate might be a “Person”. There may be multiple Persons &lt;em&gt;A&lt;/em&gt;, &lt;em&gt;B&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt;. For each of these Persons there is a separate stream. The streams might be called &lt;em&gt;person-A&lt;/em&gt;, &lt;em&gt;person-B&lt;/em&gt;, &lt;em&gt;person-C&lt;/em&gt;. The order of the events inside a stream is very important because otherwise there could occur illegal state transitions when replaying.&lt;/p&gt;

&lt;p&gt;An Event Store also must provide a way to read events. At least it should be possible to read events by stream/aggregate. In most cases however an Event Store should also be able to read events by type.&lt;/p&gt;

&lt;p&gt;When we talk about minimal requirement for an Event Store then I would say that subscriptions/notifications are not a requirement. Subscriptions can be built on top of the reading facility.&lt;/p&gt;

&lt;h1 id=&quot;optimistic-locking&quot;&gt;Optimistic Locking&lt;/h1&gt;

&lt;p&gt;Vaughn Vernon’s &lt;a href=&quot;https://www.goodreads.com/book/show/15756865-implementing-domain-driven-design&quot;&gt;IDDD book&lt;/a&gt; and &lt;a href=&quot;https://cqrs.files.wordpress.com/2010/11/cqrs_documents.pdf&quot;&gt;Greg Young’s papers on CQRS&lt;/a&gt; both show a similar interface for an Event Store. Here’s Greg Young’s Version (taken from his &lt;a href=&quot;https://github.com/gregoryyoung/m-r/blob/master/SimpleCQRS/EventStore.cs&quot;&gt;example project&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IEventStore&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SaveEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aggregateId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expectedVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetEventsForAggregate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aggregateId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aggregateId&lt;/code&gt; implies Domain Driven Design (DDD) although it is not necessary to use DDD for Event Sourcing but it somehow fits very well. Instead of calling it &lt;code class=&quot;highlighter-rouge&quot;&gt;aggregateId&lt;/code&gt; it could also be called &lt;code class=&quot;highlighter-rouge&quot;&gt;eventStreamId&lt;/code&gt; or similar. Also note that this interface only provides &lt;code class=&quot;highlighter-rouge&quot;&gt;GetEventsForAggregate&lt;/code&gt; because Greg Young’s implementation publishes events after persisting them. His implementation is very basic so don’t bother about the details here.&lt;/p&gt;

&lt;p&gt;However for me the most notable thing is the &lt;code class=&quot;highlighter-rouge&quot;&gt;expectedVersion&lt;/code&gt;. Greg Young explains in his &lt;a href=&quot;https://cqrs.files.wordpress.com/2010/11/cqrs_documents.pdf&quot;&gt;his paper&lt;/a&gt;, that this is used for optimistic locking. So when saving an aggregate (or stream) the &lt;code class=&quot;highlighter-rouge&quot;&gt;expectedVersion&lt;/code&gt; indicates the version of the latest event in the given stream expected when appending the new event. If the aggregate has been modified in the meantime then the Event Store will throw a &lt;code class=&quot;highlighter-rouge&quot;&gt;ConcurrencyException&lt;/code&gt;. This mechanism is important in order to enforce business rules.&lt;/p&gt;

&lt;p&gt;Imagine a bank account: If there is a balance of 42 CHF and two people try to withdraw these 42 CHF at almost the same time then only one must succeed.&lt;/p&gt;

&lt;h2 id=&quot;whats-wrong-with-optimistic-locking&quot;&gt;Whats wrong with Optimistic Locking?&lt;/h2&gt;

&lt;p&gt;Optimistic Locking might be a performance issue. But apart from that it can be very inconvenient for the users of the system. Imagine again the &lt;em&gt;Bank Account Aggregate&lt;/em&gt;: On withdrawal we have to check that there is enough money. This makes sense. But what about depositing money? Does it matter in which order deposits are made? Probably not. So why bother the user with a &lt;code class=&quot;highlighter-rouge&quot;&gt;ConcurrencyException&lt;/code&gt; or something similar?&lt;/p&gt;

&lt;p&gt;It would be simple to support for example &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt; as a value to the &lt;code class=&quot;highlighter-rouge&quot;&gt;expectedVersion&lt;/code&gt; which would tell the Event Store that it should not check the version (this is actually the way it is implemented in &lt;a href=&quot;https://cqrs.files.wordpress.com/2010/11/cqrs_documents.pdf&quot;&gt;Greg Young’s example&lt;/a&gt;). But then how does the repository know in which case the version matters and in which case not? The Repository implementation would need to have business knowledge.&lt;/p&gt;

&lt;p&gt;A solution proposed in the &lt;a href=&quot;https://www.goodreads.com/book/show/15756865-implementing-domain-driven-design&quot;&gt;IDDD Book&lt;/a&gt; is that the aggregate is reloaded in case of a &lt;code class=&quot;highlighter-rouge&quot;&gt;ConcurrencyException&lt;/code&gt; and the command is retried. This can be repeated until the command  either succeeds or fails with an actual business exception.&lt;/p&gt;

&lt;p&gt;The problem that Optimistic Locking solves is technical. For business people there is always just one instance of a given aggregate (account-123, person-A, etc.). However for technical reasons there might be multiple writers due to concurrent invocations of an operation on the same aggregate.&lt;/p&gt;

&lt;p&gt;All other motivations for optimistic locking are actually business requirements. For example the business people might like to avoid that a Person’s name can be overwritten by a user shortly after is has been changed by another user. Although Optimistic Locking could be used to solve this, it would be more adequate to implement this as a business rule instead of “abusing” a technical solution for this purpose.&lt;/p&gt;

&lt;h2 id=&quot;single-writer&quot;&gt;Single Writer&lt;/h2&gt;

&lt;p&gt;There is no need for Optimistic Locking if there is always only a single writer per aggregate. This is not simple to achieve if you have a clustered application.&lt;/p&gt;

&lt;p&gt;One could use an Actor Frameworks like Akka or Vlingo which provide clustering facilities. I will go into more details on how this could be implemented in a later post. Actors basically have an inbox where they receive messages (e.g. a Command) and process them one by one. If the system is deployed on multiple nodes then sharding is required. Each shard acts as the single source for a set of aggregates. This setup assures that there is always a single writer and no Optimistic Locking is required.&lt;/p&gt;

&lt;h1 id=&quot;implementation-challenges&quot;&gt;Implementation challenges&lt;/h1&gt;

&lt;p&gt;Greg young writes:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Although not a trivial exercise to create a production quality Event Storage the overall concepts behind
  an Event Storage are relatively easy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why shouldn’t this be trivial? Well, one thing is getting the optimistic locking right.&lt;/p&gt;

&lt;p&gt;Another challenge I came across was when I tried to implement my own read journal for Akka. A Read Journal is basically the “Read Side” of the EventStore. Usually you want to subscribe to events in an Event Store. This could be a subscription to a specific aggregate, aggregate type or to specific event types.&lt;/p&gt;

&lt;p&gt;Events are used to update projections (aka Read Model) among other things. A projection could be rebuilt from scratch each time the system is started. This could get slow if there are many events in the system. Another approach is to have a persistent projection that always stores the event number of the last event that has been processed.&lt;/p&gt;

&lt;p&gt;Let’s say the system was shutdown after having read events up to number 2567. When restarting the system the Projection requests all events after 2567. If the projection subscribes to one single stream/aggregate then it is simple because if Optimistic Locking or a Single Writer is used then the aggregate’s sequence numbers are always continuous and do not have gaps. After event number &lt;em&gt;n&lt;/em&gt; there must follow event number &lt;em&gt;n + 1&lt;/em&gt; inside the same stream/aggregate.&lt;/p&gt;

&lt;p&gt;But what happens if the projection listens to a set of event types emitted by different aggregates types? The simplest approach to this is to have an auto increment field/column that provides a unique global sequence number across all streams/aggregates.&lt;/p&gt;

&lt;table border=&quot;1&quot; cellborder=&quot;0&quot; style=&quot;rounded&quot; width=&quot;100%&quot;&gt;
    &lt;thead&gt;
       &lt;tr&gt;
           &lt;th&gt;Global Seq&lt;/th&gt;
           &lt;th&gt;Stream&lt;/th&gt;
           &lt;th&gt;Seq&lt;/th&gt;
           &lt;th&gt;EventType&lt;/th&gt;
           &lt;th&gt;EventData&lt;/th&gt;
       &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;1&lt;/td&gt;
            &lt;td&gt;person-1&lt;/td&gt;
            &lt;td&gt;1&lt;/td&gt;
            &lt;td&gt;Created&lt;/td&gt;
            &lt;td&gt;{ ...}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;2&lt;/td&gt;
            &lt;td&gt;person-1&lt;/td&gt;
            &lt;td&gt;2&lt;/td&gt;
            &lt;td&gt;EmailAddressChanged&lt;/td&gt;
            &lt;td&gt;{ ...}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;3&lt;/td&gt;
            &lt;td&gt;person-2&lt;/td&gt;
            &lt;td&gt;1&lt;/td&gt;
            &lt;td&gt;Created&lt;/td&gt;
            &lt;td&gt;{ ...}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;4&lt;/td&gt;
            &lt;td&gt;person-1&lt;/td&gt;
            &lt;td&gt;3&lt;/td&gt;
            &lt;td&gt;NameChanged&lt;/td&gt;
            &lt;td&gt;{ ...}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;5&lt;/td&gt;
            &lt;td&gt;person-3&lt;/td&gt;
            &lt;td&gt;1&lt;/td&gt;
            &lt;td&gt;Created&lt;/td&gt;
            &lt;td&gt;{ ...}&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Unfortunately there is a problem if two transactions are adding an event concurrently to the Event Store (note, that this is about adding events to different streams. It is not the same as the case mentioned in &lt;a href=&quot;#optimistic-locking&quot;&gt;Optimistic Locking&lt;/a&gt; where events are added concurrently to the &lt;em&gt;same&lt;/em&gt; stream). The first transaction would write an event with the global sequence number 3 and the second transaction with number 4. Now if for some reason the second transaction commits first then the global sequence would be 1, 2, 4. As soon as the other transaction commits, the sequence would be 1, 2, 3, 4. A projection might first see the new event with number 4 and store this as the last sequence number read. So it will miss event 3! It will never read this event because the it will store 4 as the highest event processed.&lt;/p&gt;

&lt;p&gt;This problem was &lt;a href=&quot;https://github.com/akka/akka-persistence-jdbc/issues/96&quot;&gt;filed as a bug&lt;/a&gt; some time ago in the &lt;a href=&quot;https://github.com/akka/akka-persistence-jdbc&quot;&gt;akka-persistence-jdbc project&lt;/a&gt; (note that the actual problem is of course not akka specific). The solution they chose is basically as follows (I haven’t really studied the implementation): If there are gaps in the overall sequence number then the Read Journal waits for a configurable amount of time to see whether the gap is filled or not. If the journal sees 1,2,4 then it will note that there is event number 3 missing. It will wait for a moment to see whether 3 appears.&lt;/p&gt;

&lt;p&gt;I think this makes it clear that Greg Young is right, and it is not really trivial to implement your own event store.&lt;/p&gt;

&lt;h1 id=&quot;kafka-as-an-event-store&quot;&gt;Kafka as an Event Store&lt;/h1&gt;

&lt;p&gt;I don’t really know Kafka. So I’m probably not qualified… Still… here are my thoughts on this:&lt;/p&gt;

&lt;p&gt;It’s of course possible to store events in Kafka. One problem with Kafka as an Event Store is the fact that it is difficult t   o read a “Stream” of events (in the sense of Event Sourcing) efficiently. You can read more about this in this &lt;a href=&quot;https://de.slideshare.net/gschmutz/kafka-as-an-event-store-is-it-good-enough&quot;&gt;presentation from Guido Schmutz&lt;/a&gt;. At least the approach with the &lt;code class=&quot;highlighter-rouge&quot;&gt;expectedVersion&lt;/code&gt; (see &lt;a href=&quot;#optimistic-locking&quot;&gt;Optimistic Locking&lt;/a&gt;) is not feasible with Kafka as far that I know. There is an &lt;a href=&quot;https://issues.apache.org/jira/browse/KAFKA-2260&quot;&gt;open issue&lt;/a&gt; which basically requests something similar to an &lt;code class=&quot;highlighter-rouge&quot;&gt;expectedVersion&lt;/code&gt; in Kafka. Another good blog post I found while writing this post is &lt;a href=&quot;https://medium.com/serialized-io/apache-kafka-is-not-for-event-sourcing-81735c3cf5c&quot;&gt;this one here&lt;/a&gt; which states basically the same I do. Guido Schmutz mentiones two approaches: Put a database in front of Kafka (and do basically the expected Version stuff) or publish event first and the write it to the database. However I don’t understand how this last approach would work if you want to enforce business invariants. This makes no sense to me.&lt;/p&gt;

&lt;p&gt;There is another reason one might not want to use Kafka: (Micro?)Services will depend on a (central?) message broker. If Kafka is not used then probably a RDBMS is. So you depend on an RDBMS… You could of course deploy Kafka per microservice but this is probably more of an overhead than do the same with a database. I’m not sure but to me it does not seem to make much sense.&lt;/p&gt;

&lt;p&gt;Don’t get me wrong. I’m not saying Kafka is bad. It’s just not suited as an Event Store. I think that Kafka is probably a very good choice to publish events that have to be consumed by other Bounded Contexts (read about this &lt;a href=&quot;#integration-with-other-systems&quot;&gt;below&lt;/a&gt;).&lt;/p&gt;

&lt;h1 id=&quot;eventstore-as-an-event-store&quot;&gt;EventStore as an Event Store&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://eventstore.org/&quot;&gt;EventStore&lt;/a&gt; is an Open Source Event Store Implementation by Greg Young. It was one of the first Event Store implementations I came across. I have no real experience other than playing around a bit with it.&lt;/p&gt;

&lt;p&gt;As with Kafka I’m not sure whether it is the right approach to have a single, central Event Store for all your applications. Yes I know… it has “High Availability”, “Great Performance” etc. And you could of course also deploy EventStore per microservice. EventStore also provides things like “User defined projections” which of course might be great as long as you are aware of the disadvantages of such dependencies.&lt;/p&gt;

&lt;h1 id=&quot;akka-as-event-store&quot;&gt;Akka as Event Store&lt;/h1&gt;

&lt;p&gt;Currently we are using &lt;a href=&quot;https://doc.akka.io/docs/akka/current/persistence.html&quot;&gt;Akka Persistence&lt;/a&gt; as an “Event Store”. There are various implementations. We are currently using &lt;a href=&quot;https://github.com/akka/akka-persistence-jdbc&quot;&gt;akka-persistence-jdbc&lt;/a&gt; which uses basically a relational table for events and one for snapshots. The nodes that are running our (clustered) application each write their events directly to the database. The database is per microservice. So there is no central broker (however there are different implementations and &lt;a href=&quot;https://index.scala-lang.org/eventstore/eventstore.akka.persistence/akka-persistence-eventstore/7.0.1?target=_2.13&quot;&gt;one of them&lt;/a&gt; also allows &lt;a href=&quot;https://eventstore.org/&quot;&gt;Greg Young’s EventStore&lt;/a&gt; to be used.&lt;/p&gt;

&lt;p&gt;I feel that this is the right choice. Not because we use Akka. The same could be achieved in a different way. The main advantage in my opinion is the fact that the Event Store is per microservice and we do not depend on a message broker.&lt;/p&gt;

&lt;h1 id=&quot;integration-with-other-systems&quot;&gt;Integration with other Systems&lt;/h1&gt;

&lt;p&gt;As mentioned before, Event Sourcing Events ar primarily used to reconstitute the state of your system. Of course these events could also be directly “published” and then consumed by other Systems and Bounded Contexts.&lt;/p&gt;

&lt;p&gt;Personally I don’t like this idea very much. The events are very specific. As soon as these events are “in the wild” you have to care about other consumers and not just yourself. Also regarding security (especially privacy) this may get very complicated. There may be information in your system that nobody else must know. But if you just publish all events then you cannot protect this information (or at least it could get complicated very quickly).&lt;/p&gt;

&lt;p&gt;There is still an advantage in using Event Sourcing because it possible to listen to specific events and then publish “Integration Events” that are used for communication with other systems. In a “classic” application that persists the current state of the system such events have to be created apart.&lt;/p&gt;

&lt;p&gt;However I would definitely consider the direct consumption of Event Sourcing Events inside the same Bounded Context (as in DDD). This includes Read Models/Projections, Process Managers etc.&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Implementing Event Stores is not trivial. Use an existing implementation if possible.&lt;/li&gt;
  &lt;li&gt;Whatever Event Store you’re using: Make sure it allows you to ensure invariants either with Optimistic Locking or by otherwise ensuring sequential processing of commands per Aggregate.&lt;/li&gt;
  &lt;li&gt;I prefer an Event Store per microservice over a central Event Store.&lt;/li&gt;
  &lt;li&gt;Consume Event Sourcing Events only inside the same Bounded Context.&lt;/li&gt;
  &lt;li&gt;Kafka is not suited as an Event Store but might be great for publish events for consumption by other systems or Bounded Contexts&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Oliver Jaun</name></author><summary type="html">This is the first part in a series about Event Sourcing. In the past year I was involved in the development of a Java application using Event Sourcing. Actually we did it twice using different approaches. In this post I’d like to share some thoughts about Event Stores. See also my other post on Event Sourcing: Part I: Notes on Event Stores Part II: Commands can be rejected Part III: Implementation Approaches Part IV: Thinking Differently This post assumes that you know what Event Sourcing is. If not then I recommend that you read this Document from Greg Young. What is an Event Store? Martin Fowler writes about different Event-Driven Patterns in this article. For example he mentions Event Notification which is used to notify other systems of a change. Events in event sourcing might also be used for this purpose but it is not their main purpose. In an Event Sources System events are primarily used to reconstitute the state of the system. These events are stored in an Event Store. An Event Store must be capable of storing streams of events. An event stream is just an ordered list of events belonging to an aggregate (in terms of DDD). The events are stored in order they are emitted. G cluster_0 Stream for person&amp;#45;A cluster_1 Stream for person&amp;#45;B cluster_2 Stream for person&amp;#45;C event31 Event #1 Created event32 Event #2 NameChanged event31&amp;#45;&amp;gt;event32 event33 Event #3 Moved event32&amp;#45;&amp;gt;event33 event21 Event #1 Created event22 Event #2 JobChanged event21&amp;#45;&amp;gt;event22 event11 Event #1 Created event12 Event #2 EmailAddressChanged event11&amp;#45;&amp;gt;event12 event13 Event #3 NameChanged event12&amp;#45;&amp;gt;event13 event14 Event #4 Died event13&amp;#45;&amp;gt;event14 Streams in an Event Store An example of an aggregate might be a “Person”. There may be multiple Persons A, B, C. For each of these Persons there is a separate stream. The streams might be called person-A, person-B, person-C. The order of the events inside a stream is very important because otherwise there could occur illegal state transitions when replaying. An Event Store also must provide a way to read events. At least it should be possible to read events by stream/aggregate. In most cases however an Event Store should also be able to read events by type. When we talk about minimal requirement for an Event Store then I would say that subscriptions/notifications are not a requirement. Subscriptions can be built on top of the reading facility. Optimistic Locking Vaughn Vernon’s IDDD book and Greg Young’s papers on CQRS both show a similar interface for an Event Store. Here’s Greg Young’s Version (taken from his example project): public interface IEventStore { void SaveEvents(Guid aggregateId, IEnumerable&amp;lt;Event&amp;gt; events, int expectedVersion); List&amp;lt;Event&amp;gt; GetEventsForAggregate(Guid aggregateId); } aggregateId implies Domain Driven Design (DDD) although it is not necessary to use DDD for Event Sourcing but it somehow fits very well. Instead of calling it aggregateId it could also be called eventStreamId or similar. Also note that this interface only provides GetEventsForAggregate because Greg Young’s implementation publishes events after persisting them. His implementation is very basic so don’t bother about the details here. However for me the most notable thing is the expectedVersion. Greg Young explains in his his paper, that this is used for optimistic locking. So when saving an aggregate (or stream) the expectedVersion indicates the version of the latest event in the given stream expected when appending the new event. If the aggregate has been modified in the meantime then the Event Store will throw a ConcurrencyException. This mechanism is important in order to enforce business rules. Imagine a bank account: If there is a balance of 42 CHF and two people try to withdraw these 42 CHF at almost the same time then only one must succeed. Whats wrong with Optimistic Locking? Optimistic Locking might be a performance issue. But apart from that it can be very inconvenient for the users of the system. Imagine again the Bank Account Aggregate: On withdrawal we have to check that there is enough money. This makes sense. But what about depositing money? Does it matter in which order deposits are made? Probably not. So why bother the user with a ConcurrencyException or something similar? It would be simple to support for example -1 as a value to the expectedVersion which would tell the Event Store that it should not check the version (this is actually the way it is implemented in Greg Young’s example). But then how does the repository know in which case the version matters and in which case not? The Repository implementation would need to have business knowledge. A solution proposed in the IDDD Book is that the aggregate is reloaded in case of a ConcurrencyException and the command is retried. This can be repeated until the command either succeeds or fails with an actual business exception. The problem that Optimistic Locking solves is technical. For business people there is always just one instance of a given aggregate (account-123, person-A, etc.). However for technical reasons there might be multiple writers due to concurrent invocations of an operation on the same aggregate. All other motivations for optimistic locking are actually business requirements. For example the business people might like to avoid that a Person’s name can be overwritten by a user shortly after is has been changed by another user. Although Optimistic Locking could be used to solve this, it would be more adequate to implement this as a business rule instead of “abusing” a technical solution for this purpose. Single Writer There is no need for Optimistic Locking if there is always only a single writer per aggregate. This is not simple to achieve if you have a clustered application. One could use an Actor Frameworks like Akka or Vlingo which provide clustering facilities. I will go into more details on how this could be implemented in a later post. Actors basically have an inbox where they receive messages (e.g. a Command) and process them one by one. If the system is deployed on multiple nodes then sharding is required. Each shard acts as the single source for a set of aggregates. This setup assures that there is always a single writer and no Optimistic Locking is required. Implementation challenges Greg young writes: Although not a trivial exercise to create a production quality Event Storage the overall concepts behind an Event Storage are relatively easy Why shouldn’t this be trivial? Well, one thing is getting the optimistic locking right. Another challenge I came across was when I tried to implement my own read journal for Akka. A Read Journal is basically the “Read Side” of the EventStore. Usually you want to subscribe to events in an Event Store. This could be a subscription to a specific aggregate, aggregate type or to specific event types. Events are used to update projections (aka Read Model) among other things. A projection could be rebuilt from scratch each time the system is started. This could get slow if there are many events in the system. Another approach is to have a persistent projection that always stores the event number of the last event that has been processed. Let’s say the system was shutdown after having read events up to number 2567. When restarting the system the Projection requests all events after 2567. If the projection subscribes to one single stream/aggregate then it is simple because if Optimistic Locking or a Single Writer is used then the aggregate’s sequence numbers are always continuous and do not have gaps. After event number n there must follow event number n + 1 inside the same stream/aggregate. But what happens if the projection listens to a set of event types emitted by different aggregates types? The simplest approach to this is to have an auto increment field/column that provides a unique global sequence number across all streams/aggregates. Global Seq Stream Seq EventType EventData 1 person-1 1 Created { ...} 2 person-1 2 EmailAddressChanged { ...} 3 person-2 1 Created { ...} 4 person-1 3 NameChanged { ...} 5 person-3 1 Created { ...} Unfortunately there is a problem if two transactions are adding an event concurrently to the Event Store (note, that this is about adding events to different streams. It is not the same as the case mentioned in Optimistic Locking where events are added concurrently to the same stream). The first transaction would write an event with the global sequence number 3 and the second transaction with number 4. Now if for some reason the second transaction commits first then the global sequence would be 1, 2, 4. As soon as the other transaction commits, the sequence would be 1, 2, 3, 4. A projection might first see the new event with number 4 and store this as the last sequence number read. So it will miss event 3! It will never read this event because the it will store 4 as the highest event processed. This problem was filed as a bug some time ago in the akka-persistence-jdbc project (note that the actual problem is of course not akka specific). The solution they chose is basically as follows (I haven’t really studied the implementation): If there are gaps in the overall sequence number then the Read Journal waits for a configurable amount of time to see whether the gap is filled or not. If the journal sees 1,2,4 then it will note that there is event number 3 missing. It will wait for a moment to see whether 3 appears. I think this makes it clear that Greg Young is right, and it is not really trivial to implement your own event store. Kafka as an Event Store I don’t really know Kafka. So I’m probably not qualified… Still… here are my thoughts on this: It’s of course possible to store events in Kafka. One problem with Kafka as an Event Store is the fact that it is difficult t o read a “Stream” of events (in the sense of Event Sourcing) efficiently. You can read more about this in this presentation from Guido Schmutz. At least the approach with the expectedVersion (see Optimistic Locking) is not feasible with Kafka as far that I know. There is an open issue which basically requests something similar to an expectedVersion in Kafka. Another good blog post I found while writing this post is this one here which states basically the same I do. Guido Schmutz mentiones two approaches: Put a database in front of Kafka (and do basically the expected Version stuff) or publish event first and the write it to the database. However I don’t understand how this last approach would work if you want to enforce business invariants. This makes no sense to me. There is another reason one might not want to use Kafka: (Micro?)Services will depend on a (central?) message broker. If Kafka is not used then probably a RDBMS is. So you depend on an RDBMS… You could of course deploy Kafka per microservice but this is probably more of an overhead than do the same with a database. I’m not sure but to me it does not seem to make much sense. Don’t get me wrong. I’m not saying Kafka is bad. It’s just not suited as an Event Store. I think that Kafka is probably a very good choice to publish events that have to be consumed by other Bounded Contexts (read about this below). EventStore as an Event Store EventStore is an Open Source Event Store Implementation by Greg Young. It was one of the first Event Store implementations I came across. I have no real experience other than playing around a bit with it. As with Kafka I’m not sure whether it is the right approach to have a single, central Event Store for all your applications. Yes I know… it has “High Availability”, “Great Performance” etc. And you could of course also deploy EventStore per microservice. EventStore also provides things like “User defined projections” which of course might be great as long as you are aware of the disadvantages of such dependencies. Akka as Event Store Currently we are using Akka Persistence as an “Event Store”. There are various implementations. We are currently using akka-persistence-jdbc which uses basically a relational table for events and one for snapshots. The nodes that are running our (clustered) application each write their events directly to the database. The database is per microservice. So there is no central broker (however there are different implementations and one of them also allows Greg Young’s EventStore to be used. I feel that this is the right choice. Not because we use Akka. The same could be achieved in a different way. The main advantage in my opinion is the fact that the Event Store is per microservice and we do not depend on a message broker. Integration with other Systems As mentioned before, Event Sourcing Events ar primarily used to reconstitute the state of your system. Of course these events could also be directly “published” and then consumed by other Systems and Bounded Contexts. Personally I don’t like this idea very much. The events are very specific. As soon as these events are “in the wild” you have to care about other consumers and not just yourself. Also regarding security (especially privacy) this may get very complicated. There may be information in your system that nobody else must know. But if you just publish all events then you cannot protect this information (or at least it could get complicated very quickly). There is still an advantage in using Event Sourcing because it possible to listen to specific events and then publish “Integration Events” that are used for communication with other systems. In a “classic” application that persists the current state of the system such events have to be created apart. However I would definitely consider the direct consumption of Event Sourcing Events inside the same Bounded Context (as in DDD). This includes Read Models/Projections, Process Managers etc. Summary Implementing Event Stores is not trivial. Use an existing implementation if possible. Whatever Event Store you’re using: Make sure it allows you to ensure invariants either with Optimistic Locking or by otherwise ensuring sequential processing of commands per Aggregate. I prefer an Event Store per microservice over a central Event Store. Consume Event Sourcing Events only inside the same Bounded Context. Kafka is not suited as an Event Store but might be great for publish events for consumption by other systems or Bounded Contexts</summary></entry><entry><title type="html">Bean Validation is bad</title><link href="http://localhost:4000/blog/2019/10/beanvalidation" rel="alternate" type="text/html" title="Bean Validation is bad" /><published>2019-10-10T00:00:00+02:00</published><updated>2019-10-10T00:00:00+02:00</updated><id>http://localhost:4000/blog/2019/10/beanvalidation</id><content type="html" xml:base="http://localhost:4000/blog/2019/10/beanvalidation">&lt;p&gt;I’ve never really looked into &lt;a href=&quot;https://jcp.org/en/jsr/detail?id=380&quot;&gt;Java Bean Validation&lt;/a&gt; until some architects at my company suggested it. After going through a tutorial I was not convinced… So I googled for “Bean Validation is bad” in order to see if I’m the only one. And I was not…&lt;/p&gt;

&lt;p&gt;One of the first blog posts that appeared was &lt;a href=&quot;https://in.relation.to/2014/06/19/blah-vs-bean-validation-you-missed-the-point-like-mars-climate-orbiter/&quot;&gt;this one here&lt;/a&gt; written by Emmanual Bernard which was the Spec Lead of Bean Validation. In his post he’s is defending Bean Validation which is not surprising of course.&lt;/p&gt;

&lt;p&gt;The guy who confirmed my doubts was a guy named Oliver Gierke (who seems to have a nice blog &lt;a href=&quot;http://olivergierke.de&quot;&gt;here&lt;/a&gt;). However this was just a comment in the comment section of the blog and I think this topic deserves a full blog post. I will also show hot to “properly” use Bean Validation. But let’s start in the beginning.&lt;/p&gt;

&lt;h1 id=&quot;whats-the-problem&quot;&gt;What’s the problem?&lt;/h1&gt;

&lt;p&gt;I assume that you have some basic knowledge of bean validation (if not then &lt;a href=&quot;https://www.baeldung.com/javax-validation&quot;&gt;this article here&lt;/a&gt; might be a good introduction). Let’s look at the example Oliver is using in his response to Emmanuel’s post:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Email&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This assures that the email address cannot be null and that it is an email address. Note that in order for these rules to be applied you need to trigger somehow a validator that will do the actual validation (a common implementation would be &lt;a href=&quot;https://hibernate.org/validator/&quot;&gt;hibernate-validator&lt;/a&gt;)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;ValidatorFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Validation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buildDefaultValidatorFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Validator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In case you’re using JEE or some Spring extensions the frameworks might take care of the validation. So instead of triggering the validation yourself in an stateless session bean you could just write the following and the framework (e.g. JEE in this example) will take care of &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; validation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Stateless&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Valid&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;@Valid&lt;/code&gt; annotation makes sure the validation recurses to all fields that are annotated with @Valid. If you forget &lt;code class=&quot;highlighter-rouge&quot;&gt;@Valid&lt;/code&gt; then nothing will be validated.&lt;/p&gt;

&lt;p&gt;Let’s look at an alternative approach Oliver Gierke is proposing:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmailAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EmailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;c1&quot;&gt;// explicit null check&lt;/span&gt;
	  &lt;span class=&quot;c1&quot;&gt;// regex validation&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EmailAddress&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	  &lt;span class=&quot;c1&quot;&gt;// reject null email&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A new class &lt;code class=&quot;highlighter-rouge&quot;&gt;EmailAddress&lt;/code&gt; is introduced. The constructor explicitly validates the value. In other words: the constructor is doing what it was made for:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;They [constructors] have the task of initializing the object’s data members and of establishing the invariant of the class, failing if the invariant is invalid. &lt;a href=&quot;https://en.wikipedia.org/w/index.php?title=Constructor_(object-oriented_programming)&amp;amp;oldid=919933748&quot;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So by using Bean Validation you are basically ignoring essential object oriented principals. Also you’re tying your domain objects to a framework which is not really a good idea according to &lt;a href=&quot;https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&quot;&gt;Clean Architecture&lt;/a&gt; the framwork is a “detail”. So why would anyone invent something like Bean Validation? The specification states:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To avoid duplication of these validations in each layer, developers often bundle validation logic directly into the domain model, cluttering domain classes with validation code that is, in fact, metadata about the class itself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I do not agree with this. Validation logic is essential business logic! It is not meta data. You’re domain logic expects something to be an “email address”, a “contract number” or a “name” etc. also, Emmanual Bernard thinks that developers are lazy:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you do that in your projects kudos. Most developers including me are more lazy :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think it is the opposite: If they were lazy they would probably define an EmailAddress class. It is simpler to just create an &lt;code class=&quot;highlighter-rouge&quot;&gt;EmailAddress&lt;/code&gt; object once and simply pass it around instead of adding validation annotations everywhere.&lt;/p&gt;

&lt;p&gt;If you still think that it is a lot of work to create such objects then think about behaviour:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nc&quot;&gt;EmailAddress&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;james.bond@mi6.co.uk&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;emailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;punyEncoded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// returns a punny encoded string&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;emailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isGmailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// returns true if email ends with gmail.com or google.com etc.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;emailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDomainPart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// returns &quot;mi6.co.uk&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;emailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLocalPart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// returns &quot;james.bond&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is what objects are all about… We want to avoid an anemic domain model:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The catch comes when you look at the behavior, and you realize that there is hardly any behavior on these objects, making them little more than bags of getters and setters &lt;a href=&quot;https://www.martinfowler.com/bliki/AnemicDomainModel.html&quot;&gt;Martin Fowler (25 November 2003)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s amazing how Java developers try to avoid objects. I think the problem comes from the history of Java and frameworks like JEE and JPA that forced people to implement classes with empty constructors. In JPA you are forced to create DTOs which are not Objects but data structures. The “O” in “ORM” stands for Object but what you are doing is mapping data from the database to a data structure. There is &lt;a href=&quot;https://blog.cleancoder.com/uncle-bob/2019/06/16/ObjectsAndDataStructures.html&quot;&gt;very funny blog post from Robert C. Martin (Uncle Bob)&lt;/a&gt; where he writes about it. Don’t miss it.&lt;/p&gt;

&lt;p&gt;It’s also very simple to test the &lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; object containing the EmailAddress object.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;nc&quot;&gt;Execution&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EMailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;invalid@@@@@@email.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;assertThrows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pretty simple, right? Now with Bean Validation:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invalid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;invalid@@@@@@email.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;nc&quot;&gt;ValidatorFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Validation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buildDefaultValidatorFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Validator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConstraintViolation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So which test would you prefer as a lazy programmer? Of course I’m exaggerating a bit. As you can see Bean Validation seems to offer something called a ConstraintViolation. The EmailAddress doesn’t have this “out-of-the-box” but it could certainly be implemented although I would not do it. I’ll explain later why.&lt;/p&gt;

&lt;p&gt;Now, after bad-mouthing bean validation let’s talk about its virtues.&lt;/p&gt;

&lt;h1 id=&quot;how-to-properly-use-bean-validation&quot;&gt;How to “properly” use bean validation&lt;/h1&gt;

&lt;p&gt;You can find the “final solution” &lt;a href=&quot;https://github.com/olijaun/playground/tree/master/beanvalidation-example&quot;&gt;in my github repository&lt;/a&gt;. Assume the following request to a registration service:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST http://localhost:8080/registrations &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: application/json&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'
{ 
  &quot;emailAddress&quot;: &quot;abc@def.ch&quot;, 
  &quot;name&quot;: &quot;Oliver Jaun&quot;, 
  &quot;password&quot;: &quot;secret&quot; 
}'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There can be several validation error here. Now let’s look at the webservice implementation (using jax-rs):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/registrations&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegistrationResource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Inject&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegistrationService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registrationService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@POST&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Produces&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TEXT_PLAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RegistrationDto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registrationDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;EmailAddress&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registrationDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEmailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;RegistrationCommand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registrationCommand&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegistrationCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registrationDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registrationDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;RegistrationId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registrationId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registrationService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registrationCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registrationId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;register&lt;/code&gt; method receives a RegistrationDto. A Dto is not really an object it is a data structure. It is mutable and has getter and setter methods for modification. First the email address from the registrationDto is converted into an &lt;code class=&quot;highlighter-rouge&quot;&gt;EmailAddress&lt;/code&gt; object. After this a &lt;code class=&quot;highlighter-rouge&quot;&gt;RegistrationCommand&lt;/code&gt; is created that is passed to the &lt;code class=&quot;highlighter-rouge&quot;&gt;RegistrationService&lt;/code&gt; which belongs to our domain model. The &lt;code class=&quot;highlighter-rouge&quot;&gt;RegistrationCommand&lt;/code&gt; verifies that name, email address and password are not null. Note that the &lt;code class=&quot;highlighter-rouge&quot;&gt;RegistrationCommand&lt;/code&gt; is created in the REST service implementation but it belongs and is defined in the domain model.&lt;/p&gt;

&lt;p&gt;In the domain model we then have a RegistrationCommand that is valid and we can work with, without ever having to validate again. Note that the &lt;code class=&quot;highlighter-rouge&quot;&gt;RegistrationCommand&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;EmailAddress&lt;/code&gt; are immutable. So it is not possible that they suddenly are not valid anymore.&lt;/p&gt;

&lt;p&gt;The problem with this is, that if the user passes an invalid email address then the &lt;code class=&quot;highlighter-rouge&quot;&gt;EmailAddress&lt;/code&gt; will throw an &lt;code class=&quot;highlighter-rouge&quot;&gt;IllegalArgumentException&lt;/code&gt; or a &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt;. Those are unchecked exceptions and jax-rs will create a HTTP response with the status code 500. However a RESTful service should respond with a 4xx status in such cases. So you could catch these errors and return the correct status code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; &lt;span class=&quot;nd&quot;&gt;@Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/registrations&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegistrationResource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
     &lt;span class=&quot;nd&quot;&gt;@Inject&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegistrationService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registrationService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 
     &lt;span class=&quot;nd&quot;&gt;@POST&lt;/span&gt;
     &lt;span class=&quot;nd&quot;&gt;@Produces&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TEXT_PLAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
     &lt;span class=&quot;nd&quot;&gt;@Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RegistrationDto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registrationDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
         &lt;span class=&quot;nc&quot;&gt;EmailAddress&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;emailAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registrationDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEmailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IllegalArgumentException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BAD_REQUEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;invalid email address format&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NullPointerException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BAD_REQUEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;email address is mandatory&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
         &lt;span class=&quot;nc&quot;&gt;RegistrationCommand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registrationCommand&lt;/span&gt;
                 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegistrationCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registrationDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registrationDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
 
         &lt;span class=&quot;nc&quot;&gt;RegistrationId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registrationId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registrationService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registrationCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 
         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registrationId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Quite a lot of code just for an email address. Apart form that it would also be necessary to do something similar with the &lt;code class=&quot;highlighter-rouge&quot;&gt;RegistrationCommand&lt;/code&gt;. This would be even more difficult because the &lt;code class=&quot;highlighter-rouge&quot;&gt;RegistrationCommand&lt;/code&gt; contains three attributes. The name, the email address or the password… any of these could be wrong. How do we handle this properly?&lt;/p&gt;

&lt;p&gt;Assuming multiple things are wrong a UI would probably want to display all things at once. This code would get even more complicated because it would be necessary to collect multiple validation errors and return them summarized. That’s where bean validation comes into play. First we add some annotations to the &lt;code class=&quot;highlighter-rouge&quot;&gt;RegistrationDto&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegistrationDto&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Email&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@NotBlank&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@NotBlank&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// setters and getters&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is fine to have Bean Validation annotations on DTOs because - as I said before - they are data structures not objects. Also because the DTOs do not live in the domain model so it is OK to tie them to a framework. In the jax-rs service implementation we just add &lt;code class=&quot;highlighter-rouge&quot;&gt;@NotNull&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@Valid&lt;/code&gt; annotation to the &lt;code class=&quot;highlighter-rouge&quot;&gt;register&lt;/code&gt; method which is fine as well because you are using the jax-rs framework anyway.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/registrations&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegistrationResource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Inject&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegistrationService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registrationService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@POST&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Produces&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TEXT_PLAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Valid&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegistrationDto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registrationDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;EmailAddress&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registrationDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEmailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;RegistrationCommand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registrationCommand&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegistrationCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registrationDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registrationDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;RegistrationId&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registrationId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registrationService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registrationCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registrationId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Actually the bean validation will also throw unchecked exceptions. In order to not produce a status code 500 a ExceptionMapper is needed. An ExceptionMapper in jax-rs allows to map Exceptions to return codes. So here is a custom mapper that maps &lt;code class=&quot;highlighter-rouge&quot;&gt;ConstraintViolationException&lt;/code&gt;s to an &lt;code class=&quot;highlighter-rouge&quot;&gt;ErrorDto&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Provider&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConstraintViolationExceptionMapper&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExceptionMapper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConstraintViolationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConstraintViolationException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ValidationErrorDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getConstraintViolations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValidationErrorDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ErrorDto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;errorDto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ErrorDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;errorDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getErrors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;


        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BAD_REQUEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errorDto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConstraintViolation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pathElements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPropertyPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\\.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathElements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;joining&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that I’m doing some fancy stuff with the path because the path contains the name of the java method. I think this name should not end up in an error message because it is implementation specific. Now let’s see how this looks like when the service is invoked with invalid data:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST http://localhost:8080/registrations &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: application/json&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'
  {
    &quot;name&quot;:&quot;&quot;, 
    &quot;emailAddress&quot;: &quot;oliver@@jaun.org&quot;, 
    &quot;password&quot;: &quot;password123&quot; 
  }'&lt;/span&gt;
  
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;errors&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;location&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;must not be blank&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;location&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;emailAddress&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;must be a well-formed email address&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is nice: you can use the advantages of the Bean Validation framework but your domain model (EmailAddress etc.) stays clean. In your domain model you can rely on the objects to be properly validated. Look at the RegistrationService in the domain model:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegistrationService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegistrationId&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RegistrationCommand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registrationCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// perform registration&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registrationId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There is no bean validation at all and we can implement our domain logic without having to worry about anything. The RegistrationCommand will be valid because the constructor of the RegistrationCommand will make sure it is. Bean Validation is just a detail that is used outside of the domain logic in order to provide nice user error message to the user.&lt;/p&gt;

&lt;p&gt;But what happens if we forget to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Valid&lt;/code&gt; annotation? In this case the RESTful service still returns status code 500 because the instantiation of the domain object will throw an unchecked exception (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;IllegalArgumentException&lt;/code&gt;). This is fine. Firstly: it should not happen if you write tests. Secondly if it happens then it’s a bug. Whenever the service returns status code 500 this should be logged. The error must be analyzed and then fixed as you do with any other bug.&lt;/p&gt;

&lt;p&gt;Note that the example could still be improved. IMHO there should be no plain error messages be returned by a REST service. I’m working for a swiss company and we have to support german, french and italian. What does the service return? German? French? English? All of them? Also an application calling this service might not just display a message but react to accordingly in case of an error. So I think it would be better to return some kind of error code instead of a plain error message.&lt;/p&gt;

&lt;h1 id=&quot;some-more-thoughts&quot;&gt;Some more thoughts&lt;/h1&gt;

&lt;p&gt;It could be argued that validation logic is now implemented twice. Once in the implementation for the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Email&lt;/code&gt; annotation and once in the domain model by the &lt;code class=&quot;highlighter-rouge&quot;&gt;EmailAddress&lt;/code&gt; class. Yes this is true but often the validation logic can be shared. Let’s look at an extended version of the &lt;code class=&quot;highlighter-rouge&quot;&gt;EmailAddress&lt;/code&gt; class:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmailAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EMAIL_ADDRESS_PATTERN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[^@]+@[^@]+&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EmailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;emailAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requireNonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EMAIL_ADDRESS_PATTERN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IllegalArgumentException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;invalid email address: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;asString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is not a proper email address pattern, I agree. Email address validation is quite difficult. For the sake of demonstration I still use this simplified pattern.&lt;/p&gt;

&lt;p&gt;As stated above one of my objections with bean validation is that your domain model should not depend on it. However it is fine if your application- or infrastructure layer depends on the domain logic. In order to not duplicate the validation we can reuse the EmailAddress validation in the RESTful service implementation. One possibility is to just use the &lt;code class=&quot;highlighter-rouge&quot;&gt;EMAIL_ADDRESS_PATTERN&lt;/code&gt; defined by the &lt;code class=&quot;highlighter-rouge&quot;&gt;EmailAddress&lt;/code&gt; class in the &lt;code class=&quot;highlighter-rouge&quot;&gt;RegistrationDto&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegistrationDto&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EMAIL_ADDRESS_PATTERN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@NotBlank&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@NotNull&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@NotBlank&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So instead of the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Email&lt;/code&gt; annotation the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Pattern&lt;/code&gt; annotation is used which accepts a regular expression. This is a pragmatic approach in many situations. If the validation cannot be expressed by a regular expression, then another solution would be to create a new bean bean validation annotation:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;METHOD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ANNOTATION_TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CONSTRUCTOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PARAMETER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TYPE_USE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Constraint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validatedBy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmailAddressValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValidEmailAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;invalid email address {value}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then the &lt;code class=&quot;highlighter-rouge&quot;&gt;EmailAddressValidator&lt;/code&gt; has to be created, which basically delegates the validation to our &lt;code class=&quot;highlighter-rouge&quot;&gt;EmailAddress&lt;/code&gt; class.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmailAddressValidator&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConstraintValidator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ValidEmailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ValidEmailAddress&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ageValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emailAddressAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConstraintValidatorContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constraintValidatorContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// null values are valid&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emailAddressAsString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EmailAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emailAddressAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IllegalArgumentException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;Bean Validation is not as bad as long as it is NOT used in the domain model of an application.&lt;/p&gt;

&lt;p&gt;The proposed approach of combining bean validation with proper domain objects that validate themselves has several advantages:&lt;/p&gt;

&lt;p&gt;Domain Objects remain “clean” (they do not depend on a framework) and can simply throw &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt;s or &lt;code class=&quot;highlighter-rouge&quot;&gt;IllegalArgumentException&lt;/code&gt;s in case that validations fails in the constructor.&lt;/p&gt;

&lt;p&gt;Bean Validation is used where it “shines”. It is applied only on the outer layer of an application and allows for validation with detailed messages. It also allows for multiple validation errors to be returned at once.&lt;/p&gt;

&lt;p&gt;The disadvantage of the approach is that there is a certain redundancy in validation which can however be minimized by sharing validation code.&lt;/p&gt;</content><author><name>Oliver Jaun</name></author><summary type="html">I’ve never really looked into Java Bean Validation until some architects at my company suggested it. After going through a tutorial I was not convinced… So I googled for “Bean Validation is bad” in order to see if I’m the only one. And I was not… One of the first blog posts that appeared was this one here written by Emmanual Bernard which was the Spec Lead of Bean Validation. In his post he’s is defending Bean Validation which is not surprising of course. The guy who confirmed my doubts was a guy named Oliver Gierke (who seems to have a nice blog here). However this was just a comment in the comment section of the blog and I think this topic deserves a full blog post. I will also show hot to “properly” use Bean Validation. But let’s start in the beginning. What’s the problem? I assume that you have some basic knowledge of bean validation (if not then this article here might be a good introduction). Let’s look at the example Oliver is using in his response to Emmanuel’s post: class User { @NotNull @Email String emailAddress; } This assures that the email address cannot be null and that it is an email address. Note that in order for these rules to be applied you need to trigger somehow a validator that will do the actual validation (a common implementation would be hibernate-validator) ValidatorFactory factory = Validation.buildDefaultValidatorFactory(); Validator validator = factory.getValidator(); In case you’re using JEE or some Spring extensions the frameworks might take care of the validation. So instead of triggering the validation yourself in an stateless session bean you could just write the following and the framework (e.g. JEE in this example) will take care of User validation. @Stateless public class MyBean { public void create(@Valid User user) { // ... } } The @Valid annotation makes sure the validation recurses to all fields that are annotated with @Valid. If you forget @Valid then nothing will be validated. Let’s look at an alternative approach Oliver Gierke is proposing: class EmailAddress { public EmailAddress(String value) { // explicit null check // regex validation } } class User { public User(EmailAddress email) { // reject null email } } A new class EmailAddress is introduced. The constructor explicitly validates the value. In other words: the constructor is doing what it was made for: They [constructors] have the task of initializing the object’s data members and of establishing the invariant of the class, failing if the invariant is invalid. Wikipedia So by using Bean Validation you are basically ignoring essential object oriented principals. Also you’re tying your domain objects to a framework which is not really a good idea according to Clean Architecture the framwork is a “detail”. So why would anyone invent something like Bean Validation? The specification states: To avoid duplication of these validations in each layer, developers often bundle validation logic directly into the domain model, cluttering domain classes with validation code that is, in fact, metadata about the class itself. I do not agree with this. Validation logic is essential business logic! It is not meta data. You’re domain logic expects something to be an “email address”, a “contract number” or a “name” etc. also, Emmanual Bernard thinks that developers are lazy: If you do that in your projects kudos. Most developers including me are more lazy :) I think it is the opposite: If they were lazy they would probably define an EmailAddress class. It is simpler to just create an EmailAddress object once and simply pass it around instead of adding validation annotations everywhere. If you still think that it is a lot of work to create such objects then think about behaviour: EmailAddress emailAddress = new EmailAddress(&quot;james.bond@mi6.co.uk&quot;); emailAddress.punyEncoded(); // returns a punny encoded string emailAddress.isGmailAddress(); // returns true if email ends with gmail.com or google.com etc. emailAddress.getDomainPart(); // returns &quot;mi6.co.uk&quot; emailAddress.getLocalPart(); // returns &quot;james.bond&quot; This is what objects are all about… We want to avoid an anemic domain model: The catch comes when you look at the behavior, and you realize that there is hardly any behavior on these objects, making them little more than bags of getters and setters Martin Fowler (25 November 2003) It’s amazing how Java developers try to avoid objects. I think the problem comes from the history of Java and frameworks like JEE and JPA that forced people to implement classes with empty constructors. In JPA you are forced to create DTOs which are not Objects but data structures. The “O” in “ORM” stands for Object but what you are doing is mapping data from the database to a data structure. There is very funny blog post from Robert C. Martin (Uncle Bob) where he writes about it. Don’t miss it. It’s also very simple to test the User object containing the EmailAddress object. class Test { @Test void invalid() { Execution e = () -&amp;gt; new User(new EMailAddress(&quot;invalid@@@@@@email.com&quot;)); assertThrows(IllegalArgumentException.class, e); } } Pretty simple, right? Now with Bean Validation: class Test { @Test void invalid() { User user = new User(&quot;invalid@@@@@@email.com&quot;); ValidatorFactory factory = Validation.buildDefaultValidatorFactory(); Validator validator = factory.getValidator(); Set&amp;lt;ConstraintViolation&amp;lt;User&amp;gt;&amp;gt; errors = validator.validate(user); assertTrue(errors.size() &amp;gt; 0); } } So which test would you prefer as a lazy programmer? Of course I’m exaggerating a bit. As you can see Bean Validation seems to offer something called a ConstraintViolation. The EmailAddress doesn’t have this “out-of-the-box” but it could certainly be implemented although I would not do it. I’ll explain later why. Now, after bad-mouthing bean validation let’s talk about its virtues. How to “properly” use bean validation You can find the “final solution” in my github repository. Assume the following request to a registration service: curl -X POST http://localhost:8080/registrations \ -H &quot;Content-Type: application/json&quot; \ -d ' { &quot;emailAddress&quot;: &quot;abc@def.ch&quot;, &quot;name&quot;: &quot;Oliver Jaun&quot;, &quot;password&quot;: &quot;secret&quot; }' There can be several validation error here. Now let’s look at the webservice implementation (using jax-rs): @Path(&quot;/registrations&quot;) public class RegistrationResource { @Inject private RegistrationService registrationService; @POST @Produces({MediaType.TEXT_PLAIN}) @Path(&quot;/&quot;) public Response register(RegistrationDto registrationDto) { EmailAddress emailAddress = new EmailAddress(registrationDto.getEmailAddress()); RegistrationCommand registrationCommand = new RegistrationCommand(registrationDto.getName(), emailAddress, registrationDto.getPassword()); RegistrationId registrationId = registrationService.register(registrationCommand); return Response.ok(registrationId.asString()).build(); } } The register method receives a RegistrationDto. A Dto is not really an object it is a data structure. It is mutable and has getter and setter methods for modification. First the email address from the registrationDto is converted into an EmailAddress object. After this a RegistrationCommand is created that is passed to the RegistrationService which belongs to our domain model. The RegistrationCommand verifies that name, email address and password are not null. Note that the RegistrationCommand is created in the REST service implementation but it belongs and is defined in the domain model. In the domain model we then have a RegistrationCommand that is valid and we can work with, without ever having to validate again. Note that the RegistrationCommand and the EmailAddress are immutable. So it is not possible that they suddenly are not valid anymore. The problem with this is, that if the user passes an invalid email address then the EmailAddress will throw an IllegalArgumentException or a NullPointerException. Those are unchecked exceptions and jax-rs will create a HTTP response with the status code 500. However a RESTful service should respond with a 4xx status in such cases. So you could catch these errors and return the correct status code: @Path(&quot;/registrations&quot;) public class RegistrationResource { @Inject private RegistrationService registrationService; @POST @Produces({MediaType.TEXT_PLAIN}) @Path(&quot;/&quot;) public Response register(RegistrationDto registrationDto) { EmailAddress emailAddress; try { emailAddress = new EmailAddress(registrationDto.getEmailAddress()); } catch(IllegalArgumentException e) { return Response.status(Response.Status.BAD_REQUEST).entity(&quot;invalid email address format&quot;).build(); } catch (NullPointerException e) { return Response.status(Response.Status.BAD_REQUEST).entity(&quot;email address is mandatory&quot;).build(); } RegistrationCommand registrationCommand = new RegistrationCommand(registrationDto.getName(), emailAddress, registrationDto.getPassword()); RegistrationId registrationId = registrationService.register(registrationCommand); return Response.ok(registrationId.asString()).build(); } } Quite a lot of code just for an email address. Apart form that it would also be necessary to do something similar with the RegistrationCommand. This would be even more difficult because the RegistrationCommand contains three attributes. The name, the email address or the password… any of these could be wrong. How do we handle this properly? Assuming multiple things are wrong a UI would probably want to display all things at once. This code would get even more complicated because it would be necessary to collect multiple validation errors and return them summarized. That’s where bean validation comes into play. First we add some annotations to the RegistrationDto: public class RegistrationDto implements Serializable { @Email private String emailAddress; @NotNull @NotBlank private String name; @NotNull @NotBlank private String password; // setters and getters } It is fine to have Bean Validation annotations on DTOs because - as I said before - they are data structures not objects. Also because the DTOs do not live in the domain model so it is OK to tie them to a framework. In the jax-rs service implementation we just add @NotNull and @Valid annotation to the register method which is fine as well because you are using the jax-rs framework anyway. @Path(&quot;/registrations&quot;) public class RegistrationResource { @Inject private RegistrationService registrationService; @POST @Produces({MediaType.TEXT_PLAIN}) @Path(&quot;/&quot;) public Response register(@NotNull @Valid RegistrationDto registrationDto) { EmailAddress emailAddress = new EmailAddress(registrationDto.getEmailAddress()); RegistrationCommand registrationCommand = new RegistrationCommand(registrationDto.getName(), emailAddress, registrationDto.getPassword()); RegistrationId registrationId = registrationService.register(registrationCommand); return Response.ok(registrationId.asString()).build(); } } Actually the bean validation will also throw unchecked exceptions. In order to not produce a status code 500 a ExceptionMapper is needed. An ExceptionMapper in jax-rs allows to map Exceptions to return codes. So here is a custom mapper that maps ConstraintViolationExceptions to an ErrorDto: @Provider public class ConstraintViolationExceptionMapper implements ExceptionMapper&amp;lt;ConstraintViolationException&amp;gt; { public Response toResponse(ConstraintViolationException e) { List&amp;lt;ValidationErrorDto&amp;gt; collect = e.getConstraintViolations().stream() .map(v -&amp;gt; new ValidationErrorDto(toLocation(v), v.getMessage())).collect(Collectors.toList()); ErrorDto errorDto = new ErrorDto(); errorDto.getErrors().addAll(collect); return Response.status(Response.Status.BAD_REQUEST).entity(errorDto).build(); } private String toLocation(ConstraintViolation v) { String[] pathElements = v.getPropertyPath().toString().split(&quot;\\.&quot;); return Stream.of(pathElements).skip(2).collect(Collectors.joining(&quot;.&quot;)); } } Note that I’m doing some fancy stuff with the path because the path contains the name of the java method. I think this name should not end up in an error message because it is implementation specific. Now let’s see how this looks like when the service is invoked with invalid data: curl -X POST http://localhost:8080/registrations \ -H &quot;Content-Type: application/json&quot; \ -d ' { &quot;name&quot;:&quot;&quot;, &quot;emailAddress&quot;: &quot;oliver@@jaun.org&quot;, &quot;password&quot;: &quot;password123&quot; }' { &quot;errors&quot; : [ { &quot;location&quot; : &quot;name&quot;, &quot;message&quot; : &quot;must not be blank&quot; }, { &quot;location&quot; : &quot;emailAddress&quot;, &quot;message&quot; : &quot;must be a well-formed email address&quot; } ] } This is nice: you can use the advantages of the Bean Validation framework but your domain model (EmailAddress etc.) stays clean. In your domain model you can rely on the objects to be properly validated. Look at the RegistrationService in the domain model: public class RegistrationService { public RegistrationId register(RegistrationCommand registrationCommand) { // perform registration return registrationId; } } There is no bean validation at all and we can implement our domain logic without having to worry about anything. The RegistrationCommand will be valid because the constructor of the RegistrationCommand will make sure it is. Bean Validation is just a detail that is used outside of the domain logic in order to provide nice user error message to the user. But what happens if we forget to add the @Valid annotation? In this case the RESTful service still returns status code 500 because the instantiation of the domain object will throw an unchecked exception (e.g. IllegalArgumentException). This is fine. Firstly: it should not happen if you write tests. Secondly if it happens then it’s a bug. Whenever the service returns status code 500 this should be logged. The error must be analyzed and then fixed as you do with any other bug. Note that the example could still be improved. IMHO there should be no plain error messages be returned by a REST service. I’m working for a swiss company and we have to support german, french and italian. What does the service return? German? French? English? All of them? Also an application calling this service might not just display a message but react to accordingly in case of an error. So I think it would be better to return some kind of error code instead of a plain error message. Some more thoughts It could be argued that validation logic is now implemented twice. Once in the implementation for the @Email annotation and once in the domain model by the EmailAddress class. Yes this is true but often the validation logic can be shared. Let’s look at an extended version of the EmailAddress class: public class EmailAddress { public static final String EMAIL_ADDRESS_PATTERN = &quot;[^@]+@[^@]+&quot;; private String emailAddress; public EmailAddress(String emailAddress) { this.emailAddress = Objects.requireNonNull(emailAddress); if(!emailAddress.matches(EMAIL_ADDRESS_PATTERN)) { throw new IllegalArgumentException(&quot;invalid email address: &quot; + emailAddress); } } public String asString() { return emailAddress; } } This is not a proper email address pattern, I agree. Email address validation is quite difficult. For the sake of demonstration I still use this simplified pattern. As stated above one of my objections with bean validation is that your domain model should not depend on it. However it is fine if your application- or infrastructure layer depends on the domain logic. In order to not duplicate the validation we can reuse the EmailAddress validation in the RESTful service implementation. One possibility is to just use the EMAIL_ADDRESS_PATTERN defined by the EmailAddress class in the RegistrationDto: public class RegistrationDto implements Serializable { @NotNull @Pattern(regexp = EmailAddress.EMAIL_ADDRESS_PATTERN) private String emailAddress; @NotNull @NotBlank private String name; @NotNull @NotBlank private String password; } So instead of the @Email annotation the @Pattern annotation is used which accepts a regular expression. This is a pragmatic approach in many situations. If the validation cannot be expressed by a regular expression, then another solution would be to create a new bean bean validation annotation: @Target({METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE}) @Retention(RetentionPolicy.RUNTIME) @Documented @Constraint(validatedBy = { EmailAddressValidator.class }) public @interface ValidEmailAddress { String message() default &quot;invalid email address {value}&quot;; Class&amp;lt;?&amp;gt;[] groups() default {}; Class&amp;lt;? extends Payload&amp;gt;[] payload() default {}; } Then the EmailAddressValidator has to be created, which basically delegates the validation to our EmailAddress class. public class EmailAddressValidator implements ConstraintValidator&amp;lt;ValidEmailAddress, String&amp;gt; { @Override public void initialize(ValidEmailAddress ageValue) { } @Override public boolean isValid(String emailAddressAsString, ConstraintValidatorContext constraintValidatorContext) { // null values are valid if (emailAddressAsString == null) { return true; } try { new EmailAddress(emailAddressAsString); return true; } catch (IllegalArgumentException e) { return false; } } } Summary Bean Validation is not as bad as long as it is NOT used in the domain model of an application. The proposed approach of combining bean validation with proper domain objects that validate themselves has several advantages: Domain Objects remain “clean” (they do not depend on a framework) and can simply throw NullPointerExceptions or IllegalArgumentExceptions in case that validations fails in the constructor. Bean Validation is used where it “shines”. It is applied only on the outer layer of an application and allows for validation with detailed messages. It also allows for multiple validation errors to be returned at once. The disadvantage of the approach is that there is a certain redundancy in validation which can however be minimized by sharing validation code.</summary></entry><entry><title type="html">Idempotence</title><link href="http://localhost:4000/blog/2019/09/Idempotence" rel="alternate" type="text/html" title="Idempotence" /><published>2019-09-23T00:00:00+02:00</published><updated>2019-09-23T00:00:00+02:00</updated><id>http://localhost:4000/blog/2019/09/Idempotence</id><content type="html" xml:base="http://localhost:4000/blog/2019/09/Idempotence">&lt;p&gt;Idempotence is one of most essential properties of a web service. No matter whether it is REST, &lt;a href=&quot;https://en.wikipedia.org/w/index.php?title=SOAP&amp;amp;oldid=917411406&quot;&gt;SOAP&lt;/a&gt;, &lt;a href=&quot;https://grpc.io/&quot;&gt;gRPC&lt;/a&gt; or any other remoting protocol. However in my experience this aspect is often overlooked or ignored. I am aware that there are many articles about this topic already but often these articles are not tackling the topic in all his aspects. So here is my attempt.&lt;/p&gt;

&lt;h2 id=&quot;definition&quot;&gt;Definition&lt;/h2&gt;
&lt;p&gt;An elevator button is usually idempotent. It lights up when it is pressed for the first time. If it is pressed again, it won’t change. If it is pressed a hundred times, the elevator will still arrive once.&lt;/p&gt;

&lt;p&gt;In Wikipedia idempotence is defined as follows in the context of “imperative programming’:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;in imperative programming, a subroutine with side effects is idempotent if the system state remains the same after one or several calls, in other words if the function from the system state space to itself associated to the subroutine is idempotent in the mathematical sense given in the definition;  (&lt;a href=&quot;https://en.wikipedia.org/w/index.php?title=Idempotence&amp;amp;oldid=917052170&quot;&gt;Wikipedia&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is an example in Java:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;cm&quot;&gt;/** idempotent method */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;cm&quot;&gt;/** NON idempotent method */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;toUpperCase()&lt;/code&gt; is idempotent: No matter whether &lt;code class=&quot;highlighter-rouge&quot;&gt;toUpperCase()&lt;/code&gt; is called once or a hundred times: the result will be the same. &lt;code class=&quot;highlighter-rouge&quot;&gt;append()&lt;/code&gt; is not idempotent because each time it is being called the string gets longer.&lt;/p&gt;

&lt;h2 id=&quot;distributed-systems&quot;&gt;Distributed Systems&lt;/h2&gt;

&lt;p&gt;In the context of a single process (as shown above) idempotence is not so exiting… However with distributed systems that are communicating over a network things are getting more interesting.&lt;/p&gt;

&lt;p&gt;Firstly it’s important to understand why distributed computing is difficult and why there is an important difference between calling a method in the same process and calling a service that lives on a remote system via a network. Years ago Peter Deutsch enumerated eight &lt;a href=&quot;https://en.wikipedia.org/w/index.php?title=Fallacies_of_distributed_computing&amp;amp;oldid=916589690&quot;&gt;Fallacies of Distributed Computing&lt;/a&gt;. The first one was “The network is reliable”. There is also a good paper called &lt;a href=&quot;http://www.psinaptic.com/link_files/distributed_computing.pdf&quot;&gt;A Note on Distributed Computing&lt;/a&gt; I strongly recommend.&lt;/p&gt;

&lt;p&gt;So what can probably go wrong when A and B communicate via a network? A lot. Let’s look at a sequence diagram of two services communication. Service A sends a Request to Service B.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uml/82772a5d39efcda8f22cb754debffc92.svg&quot; alt=&quot;PlantUML SVG diagram&quot; class=&quot;plantuml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If Service A and Service B communicate over a network then this picture is obviously a simplification. So let’s draw the network as well:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uml/55426ebb2e5ba887edcd9fa3cf5e517b.svg&quot; alt=&quot;PlantUML SVG diagram&quot; class=&quot;plantuml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also the last image is implying that there is an synchronous communication going on which is not true. The bits and bytes are travelling from A to B and eventually B might create a response that could get lost on its way back to A. In a programming language one may get the illusion that a request is synchronous.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; https://idontbyte.jaun.org
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Rebuilt URL to: https://idontbyte.jaun.org/
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;   Trying 185.199.111.153...
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; TCP_NODELAY &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Connected to idontbyte.jaun.org &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;185.199.111.153&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; port 443 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#0)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; ALPN, offering h2
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; ALPN, offering http/1.1
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; successfully &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;certificate verify locations:
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;   CAfile: /etc/ssl/certs/ca-certificates.crt
  CApath: /etc/ssl/certs&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We get the impression that &lt;a href=&quot;https://curl.haxx.se/&quot;&gt;curl&lt;/a&gt; fetches the page at http://idontbyte.jaun.org synchronously. curl terminates as soon as it receives the response. Under the hood what this call does is send some bytes to the server and then wait to see if it ever gets some bytes as a response. The correlation of request and response is done by the underlying protocol.&lt;/p&gt;

&lt;p&gt;What happens if the page is responding very slowly? I’m using &lt;a href=&quot;http://slowwly.robertomurray.co.uk&quot;&gt;slowwly&lt;/a&gt; here to simulate a slow page. The parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;--max-time 1&lt;/code&gt; tells curl to wait one second for response:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;--max-time&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; http://slowwly.robertomurray.co.uk/delay/3000/url/http://www.google.ch
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;   Trying 34.241.172.109...
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; TCP_NODELAY &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Connected to slowwly.robertomurray.co.uk &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;34.241.172.109&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; port 80 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#0)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; GET /delay/3000/url/http://www.google.ch HTTP/1.1
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Host: slowwly.robertomurray.co.uk
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; User-Agent: curl/7.58.0
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Accept: &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Operation timed out after 1000 milliseconds with 0 bytes received
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; stopped the pause stream!
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; Closing connection 0
curl: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;28&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Operation timed out after 1000 milliseconds with 0 bytes received&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;curl returns a timeout error in this case. Now look at what can go wrong when A communicates with B:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uml/c6ec4a6ef324604859cc7bd8a1c3e652.svg&quot; alt=&quot;PlantUML SVG diagram&quot; class=&quot;plantuml&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A cannot connect to the network&lt;/li&gt;
  &lt;li&gt;A can connect to the network but B cannot be reached&lt;/li&gt;
  &lt;li&gt;B cannot connect to the network when it tries to send the response&lt;/li&gt;
  &lt;li&gt;B can send the response to the network but the response never reaches A&lt;/li&gt;
  &lt;li&gt;A is waiting for the response and after a while decides to not wait any longer (timeout)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What can be done if such a problem occurs? One simple solution is to just retry the call. So if the network cannot be reached we just retry to send the data again. If B is not responding then we just send the request again, maybe we get a response. Assume the following service that deposits 42 Swiss Francs (CHF) to account “1”.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST http://localhost:8080/accounts/1/deposits &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'
{
  &quot;amount&quot;:42,
  &quot;currency&quot;:&quot;CHF&quot;
}'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If this POST request fails for some reason (e.g. a timeout) and it is sent again then the money might be deposited twice. That is because in case of a timeout or other failures the client does not know if the recipient actually deposited the money or not. Maybe just the response was lost:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/uml/4e95a4dd884247f1ccea848d3328d971.svg&quot; alt=&quot;PlantUML SVG diagram&quot; class=&quot;plantuml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Of course it might also be the case that the transaction was not successfully processed. If the client does not retry the call then the money will never be added. So what can be done?&lt;/p&gt;

&lt;h2 id=&quot;how-to-design-idempotent-services&quot;&gt;How to design idempotent services&lt;/h2&gt;

&lt;h3 id=&quot;a-note-on-http-and-rest&quot;&gt;A note on HTTP and REST&lt;/h3&gt;

&lt;p&gt;The following examples are RESTfull services (at least sort of… please don’t call the REST police). However the general principles can also be applied to any other remoting protocol like &lt;a href=&quot;https://en.wikipedia.org/w/index.php?title=SOAP&amp;amp;oldid=917411406&quot;&gt;SOAP&lt;/a&gt;, &lt;a href=&quot;https://grpc.io/&quot;&gt;gRPC&lt;/a&gt; etc.&lt;/p&gt;

&lt;p&gt;One thing to note is the fact that HTTP defines which verbs (GET, POST, PUT, …) are supposed to be idempotent and which are not. This is defined in &lt;a href=&quot;https://tools.ietf.org/html/rfc7231&quot;&gt;rfc7231&lt;/a&gt;. When implementing a webservice this could of course be ignored but it would violate the principles of HTTP/REST. A REST service is not simply idempotent by using any of the “idempotent” verbs. It is idempotent because it was implemented this way.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Idempotent: GET, HEAD, PUT, DELETE, OPTIONS and TRACE&lt;/li&gt;
  &lt;li&gt;Non-Idempotent: POST, PATCH (see &lt;a href=&quot;https://tools.ietf.org/html/rfc5789&quot;&gt;rfc5789&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An interesting comment in respect to idempotence and HTTP can be found &lt;a href=&quot;https://stackoverflow.com/questions/45016234/what-is-idempotency-in-http-methods#targetText=A%20request%20method%20is%20considered,safe%20request%20methods%20are%20idempotent&quot;&gt;on Stackoverflow&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;some-services-are-already-idempotent&quot;&gt;Some services are already idempotent&lt;/h3&gt;

&lt;p&gt;Firstly it’s important to note that read-only services are already idempotent.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET http://localhost:8080/accounts/1/deposits/16dfa005-d882-4133-baf2-dfddbe7d61f0
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;amount&quot;&lt;/span&gt; : 42,
  &lt;span class=&quot;s2&quot;&gt;&quot;currency&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;CHF&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This reads the deposit with ID “123”. It does not change the deposit. Whether this is called once or twice does not matter. It will return the same deposit. Of course: if someone else modifies the deposit after the first call then the second call will return the modified deposit. But that is nothing to be solved by making the service idempotent. The point is that &lt;em&gt;the same client&lt;/em&gt; is not changing the result by calling the service multiple times. In order to know whether someone changed the data it would be necessary to use versioning and/or locking techniques. That’s a completely different story.&lt;/p&gt;

&lt;p&gt;Assuming that existing deposits can be modified with a PUT request (the amount is changed to 120 CHF):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; PUT http://localhost:8080/accounts/1/deposits/c0f3279a-6774-4b2e-a98e-9c7e1bedbe32 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: application/json&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'
{               
  &quot;amount&quot; : 120,
  &quot;currency&quot; : &quot;CHF&quot;
}'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we are changing the deposit “123” to have an amount of 120. This can be called multiple times without having a different outcome. So this conforms to HTTP which mandates PUT requests to be idempotent.&lt;/p&gt;

&lt;h3 id=&quot;adding-an-id-to-the-body&quot;&gt;Adding an id to the body&lt;/h3&gt;

&lt;p&gt;The problem with idemotence is mainly with services that create something. In the example a new deposits should be created for a given account. With HTTP this is usually done with POST:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl-X POST http://localhost:8080/accounts/1/deposits &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: application/json&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'
{ 
  &quot;amount&quot;: 42, 
  &quot;currency&quot;: &quot;CHF&quot; 
}'&lt;/span&gt;
aa564b53-6992-4577-8eae-c63bcafcb0a4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The creates a new deposit and returns the generated ID (aa564b53-6992-4577-8eae-c63bcafcb0a4). How can it be avoided that multiple invocations of this request won’t create multiple resources? Here is a possible solution:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl-X POST http://localhost:8080/accounts/1/deposits &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: application/json&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'
{ 
  &quot;id&quot;: 7
  &quot;amount&quot;: 42, 
  &quot;currency&quot;: &quot;CHF&quot; 
}'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So instead of letting the service generate an ID for the deposit the caller specifies the deposit ID (7) to be used in the body of the HTTP message. Now the service is able to distinguish whether the caller tries to repeatedly create the same deposit or if he tries to create a new deposit.&lt;/p&gt;

&lt;p&gt;One thing to consider is also what should happen if a client creates a POST with the same ID but a different deposit (different amount or also currency). The simplest approach is to just have a generic response saying something like “a deposit with this id has already been created” and ignore the request.&lt;/p&gt;

&lt;p&gt;An issue with this solution is that the client decides which is the deposit ID to be used. Usually the service would like to choose the ID.&lt;/p&gt;

&lt;h3 id=&quot;using-put-instead-of-post-for-resource-creation&quot;&gt;Using PUT instead of POST for resource creation&lt;/h3&gt;

&lt;p&gt;By using PUT instead of POST it is possible to specify the deposit’s ID in the URL:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; PUT &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: application/json&quot;&lt;/span&gt; http://localhost:8080/accounts/1/deposits/123 &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'
{               
  &quot;amount&quot; : 42,
  &quot;currency&quot; : &quot;CHF&quot;
}'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Similar to the POST example above the service is now able to decide whether he as already processed the transaction or not. Like with the POST example it is again the client who chooses the deposit ID (here 123).&lt;/p&gt;

&lt;p&gt;If the deposit with id “123” does not exist yet, then it is created. Subsequent calls would update the existing deposit. This might work in some cases. However it would be more “RESTfull” to use POST for resource creation and PUT for updates.&lt;/p&gt;

&lt;h3 id=&quot;providing-an-id-generator-service&quot;&gt;Providing an ID generator service&lt;/h3&gt;

&lt;p&gt;As mentioned before  a service would usually like to control the IDs used for its business objects. Also, if the client chooses the deposit ID then he could accidentally pick an ID that has been used by another client before. The service would then ignore this request and the client would never know.&lt;/p&gt;

&lt;p&gt;In order to avoid this, clients could use UUIDs (&lt;a href=&quot;https://en.wikipedia.org/w/index.php?title=Universally_unique_identifier&amp;amp;oldid=915343615&quot;&gt;preferably type 4, which are random&lt;/a&gt;). These UUIDs should be unique and there shouldn’t be any collisions. The correct format of the ID should be validated in the service.&lt;/p&gt;

&lt;p&gt;If the service must control the ID to be used then an ID generator service can be implemented:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl-X POST http://localhost:8080/id-generator
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;145b63ec-1440-46b5-b29f-6ae3c948dce4&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This id generator just generates a new ID each time it is called. This ID is then used when creating a deposit using POST. The service must check whether the deposit ID specified has been issued before. If this is true then the deposit will be created (if it does not exist yet).&lt;/p&gt;

&lt;p&gt;The disadvantage of this solution is of course that the client has to perform two calls and an additional service (the id generator) has to be implemented.&lt;/p&gt;

&lt;h3 id=&quot;providing-a-request-id-as-request-metadata&quot;&gt;Providing a request id as request metadata&lt;/h3&gt;

&lt;p&gt;Currently I think that probably the best solution is to use a dedicated request id. In case of HTTP this could be implemented as a HTTP header (according to &lt;a href=&quot;https://www.keycdn.com/support/custom-http-headers&quot;&gt;this&lt;/a&gt; I’m not using an &lt;code class=&quot;highlighter-rouge&quot;&gt;x-&lt;/code&gt; prefix). The request id is passed as a header using &lt;code class=&quot;highlighter-rouge&quot;&gt;-H &quot;request-id: 123&quot;&lt;/code&gt; in curl.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST http://localhost:8080/accounts/1/deposits &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;request-id: 123&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: application/json&quot;&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'
{
  &quot;amount&quot;: 42, 
  &quot;currency&quot;: &quot;CHF&quot; 
}'&lt;/span&gt;
ca6cf316-6061-47a2-8948-6864d5b84839&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that the service creates a new deposit id and returns it (ca6cf316-6061-47a2-8948-6864d5b84839). The service has to remember all &lt;code class=&quot;highlighter-rouge&quot;&gt;request-id&lt;/code&gt;s that he successfully processed. If the service is called with the same &lt;code class=&quot;highlighter-rouge&quot;&gt;request-id&lt;/code&gt; again then it indicates this with a special return code. For example you could use a cutstom 4xx return code like 442. According to the &lt;a href=&quot;https://tools.ietf.org/html/rfc2616#section-6.1.1&quot;&gt;rfc2616&lt;/a&gt; it is fine to define custom status codes:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;HTTP status codes are extensible&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think that the HTTP status code 409 (CONFLICT) is probably not suitable because it implies that the client can resolve the conflict and resubmit the request which is not the case here. Once a request id is “used”, the client will always get the same response over and over again.&lt;/p&gt;

&lt;p&gt;Sidenote: So why not behave “completely idempotent” and just return a 2xx status code? The problem with this solution is that it is often more difficult to implement. If a client sends a request id that has been used before but together with a different request body then what should happen? I think it would be a bad idea to just respond with “OK”. So in order for the service to detect this situation it needs to know the original request body in order to assert that the request is the same as the originally submitted one. Also if the POST returns the ID of the newly generated resource (or even a representation of the resource) then the service has to remember it. So by just saying that the request id has been used before you avoid all of these problem. But from the client’s standpoint it would be easier because as long as it sends the same request-id with same body it doesn’t have to care.&lt;/p&gt;

&lt;p&gt;Summarizing: By using a request id the service can control the generation of the deposit ID and no additional service is required in order to generate an ID. Of course it is again up to the client to use a proper &lt;code class=&quot;highlighter-rouge&quot;&gt;request-id&lt;/code&gt; that will not clash with IDs used by others. A good choice would be a UUID Type 4 and service side validation of the &lt;code class=&quot;highlighter-rouge&quot;&gt;request-id&lt;/code&gt;. This approach also allows to properly use POST instead of PUT for creation of resources.&lt;/p&gt;

&lt;h2 id=&quot;service-implementation-considerations&quot;&gt;Service implementation considerations&lt;/h2&gt;

&lt;p&gt;When implementing and idempotent service special care has to be taken when persisting a &lt;code class=&quot;highlighter-rouge&quot;&gt;request-id&lt;/code&gt;. One has to make sure the ID is “unique” (e.g. using UNIQUE constraints in a database). Violations of this constraint must be handled according to the approach taken.&lt;/p&gt;

&lt;p&gt;Also it must be assured that the business entity (the account deposit in the example) is saved in the same local transaction as the &lt;code class=&quot;highlighter-rouge&quot;&gt;request-id&lt;/code&gt;. Note that the following code is not meant a   s a good example for software design. I would not implement this all in one class and I’m aware of the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Transactional&lt;/code&gt; annotation of course.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/accounts/{id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccountResource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@POST&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Produces&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TEXT_PLAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/deposits&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addDeposit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Deposit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deposit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@HeaderParam&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;request-id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newDepositId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;transactionTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;saveRequestId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;saveNewDeposit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newDepositId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deposit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newDepositId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestIdExists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// custom status indicating that request id has been used before&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;442&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In the example application (&lt;a href=&quot;https://github.com/olijaun/playground/tree/master/idemotence-example&quot;&gt;see here for full source&lt;/a&gt;) there are two inserts into the database performed: First the &lt;code class=&quot;highlighter-rouge&quot;&gt;requestId&lt;/code&gt; is saved by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;saveRequestId()&lt;/code&gt;. Second the business entity itself (the deposit) is saved by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;saveNewDeposit()&lt;/code&gt; (the example uses a relational database and SQL for this).&lt;/p&gt;

&lt;p&gt;Both inserts are preformed inside the same local transaction (here using Spring programmatic transactions). This is very important: If one would insert the &lt;code class=&quot;highlighter-rouge&quot;&gt;requestId&lt;/code&gt; in a separate transaction and the second insert for the deposit entry would fail afterwards then the request would appear to be processed on repeated calls. Actually you could also first insert the deposit and afterwards insert the request id.&lt;/p&gt;

&lt;p&gt;This implementation might return a server error (HTTP status code 500) if it is called twice almost in parallel with the same request id. The first client will succeed locking the request table. The second will fail and enter the catch block. Assuming the transaction that locked the table did not commit yet, then &lt;code class=&quot;highlighter-rouge&quot;&gt;requestIdExists()&lt;/code&gt; would return false and the exception will be thrown. It is fine to return a 5xx HTTP status code (this is implicitly done here by rethrowing the error). A client would usually retry calls that returned a technical error. So the next attempt would usually return a 442.&lt;/p&gt;

&lt;p&gt;This also shows that it is not possible to implement &lt;code class=&quot;highlighter-rouge&quot;&gt;saveIdempotenceId()&lt;/code&gt; using two distinct databases. I mentioned that a local transaction must be used. This is only possible “inside” the same database. It would be possible to use two different database and distributed transactions (&lt;a href=&quot;https://de.wikipedia.org/wiki/X/Open_XA&quot;&gt;XA Transactions&lt;/a&gt;). The problem with distributed transactions is that they are… well… distributed. So they are actually suffering kind of the same problem we are trying to solve. If you don’t believe me then look-up “xa heuristic exceptions” (&lt;a href=&quot;https://www.atomikos.com/Documentation/HeuristicExceptions&quot;&gt;look here for example&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;how-to-handle-non-idempotent-services&quot;&gt;How to handle non idempotent services&lt;/h2&gt;

&lt;p&gt;Idempotence allows to retry calls that have failed without fearing any unwanted side effects. It is the base for eventual consistency and architectural patterns like &lt;a href=&quot;https://microservices.io/patterns/data/saga.html&quot;&gt;SAGA&lt;/a&gt;s.&lt;/p&gt;

&lt;p&gt;It’s amazing how many service I’ve seen in my daily work that are not idempotent. What can be done if you have to use a non idempotent service?&lt;/p&gt;

&lt;p&gt;Let’s look at a concrete case I had to solve. I implemented a user registration service that - among other things - had to print a password lettern (yes, a physical letter… real paper…you know). For printing I had to call a printing service which was not idempotent. So what do I do if I get a technical error or a timeout from this service? Retry? Then the customer might receive two password letters. If I don’t retry he might get no letter at all.&lt;/p&gt;

&lt;p&gt;It’s important to note that this problem cannot be solved if the printing service cannot be made idempotent. Period. What I did in this case was to query the printing service for any password letters that have been printed on the same day. If there were any I did not retry. This solution makes it very unlikely that the letter is sent twice and it guarantees that it sent at least once. I haven’t heard of any customer that has received two letters so far but it is obvious that the solution would be more robust and even simpler if the printing service was idempotent.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Idempotence is important. You will not be able to achieve eventual consistency if services are not idempotent. Services that are read-only are already idempotent. Special care has to be taken in case of services that create new resources. My recommendation is to use a request id in the header of HTTP POST messages. Make sure to store the request id in the same local transaction as the business entity. Update requests are often also already idempotent.&lt;/p&gt;</content><author><name>Oliver Jaun</name></author><summary type="html">Idempotence is one of most essential properties of a web service. No matter whether it is REST, SOAP, gRPC or any other remoting protocol. However in my experience this aspect is often overlooked or ignored. I am aware that there are many articles about this topic already but often these articles are not tackling the topic in all his aspects. So here is my attempt. Definition An elevator button is usually idempotent. It lights up when it is pressed for the first time. If it is pressed again, it won’t change. If it is pressed a hundred times, the elevator will still arrive once. In Wikipedia idempotence is defined as follows in the context of “imperative programming’: in imperative programming, a subroutine with side effects is idempotent if the system state remains the same after one or several calls, in other words if the function from the system state space to itself associated to the subroutine is idempotent in the mathematical sense given in the definition; (Wikipedia) Here is an example in Java: public class MyString { private String string; public MyString(String s) { string = s; } /** idempotent method */ public void toUpperCase() { string = string.toUpperCase(); } /** NON idempotent method */ public void append(String s) { string = string + s; } public String getValue() { return string; } } toUpperCase() is idempotent: No matter whether toUpperCase() is called once or a hundred times: the result will be the same. append() is not idempotent because each time it is being called the string gets longer. Distributed Systems In the context of a single process (as shown above) idempotence is not so exiting… However with distributed systems that are communicating over a network things are getting more interesting. Firstly it’s important to understand why distributed computing is difficult and why there is an important difference between calling a method in the same process and calling a service that lives on a remote system via a network. Years ago Peter Deutsch enumerated eight Fallacies of Distributed Computing. The first one was “The network is reliable”. There is also a good paper called A Note on Distributed Computing I strongly recommend. So what can probably go wrong when A and B communicate via a network? A lot. Let’s look at a sequence diagram of two services communication. Service A sends a Request to Service B. If Service A and Service B communicate over a network then this picture is obviously a simplification. So let’s draw the network as well: Also the last image is implying that there is an synchronous communication going on which is not true. The bits and bytes are travelling from A to B and eventually B might create a response that could get lost on its way back to A. In a programming language one may get the illusion that a request is synchronous. $ curl -v https://idontbyte.jaun.org * Rebuilt URL to: https://idontbyte.jaun.org/ * Trying 185.199.111.153... * TCP_NODELAY set * Connected to idontbyte.jaun.org (185.199.111.153) port 443 (#0) * ALPN, offering h2 * ALPN, offering http/1.1 * successfully set certificate verify locations: * CAfile: /etc/ssl/certs/ca-certificates.crt CApath: /etc/ssl/certs We get the impression that curl fetches the page at http://idontbyte.jaun.org synchronously. curl terminates as soon as it receives the response. Under the hood what this call does is send some bytes to the server and then wait to see if it ever gets some bytes as a response. The correlation of request and response is done by the underlying protocol. What happens if the page is responding very slowly? I’m using slowwly here to simulate a slow page. The parameter --max-time 1 tells curl to wait one second for response: $ curl --max-time 1 -v http://slowwly.robertomurray.co.uk/delay/3000/url/http://www.google.ch * Trying 34.241.172.109... * TCP_NODELAY set * Connected to slowwly.robertomurray.co.uk (34.241.172.109) port 80 (#0) &amp;gt; GET /delay/3000/url/http://www.google.ch HTTP/1.1 &amp;gt; Host: slowwly.robertomurray.co.uk &amp;gt; User-Agent: curl/7.58.0 &amp;gt; Accept: */* &amp;gt; * Operation timed out after 1000 milliseconds with 0 bytes received * stopped the pause stream! * Closing connection 0 curl: (28) Operation timed out after 1000 milliseconds with 0 bytes received curl returns a timeout error in this case. Now look at what can go wrong when A communicates with B: A cannot connect to the network A can connect to the network but B cannot be reached B cannot connect to the network when it tries to send the response B can send the response to the network but the response never reaches A A is waiting for the response and after a while decides to not wait any longer (timeout) What can be done if such a problem occurs? One simple solution is to just retry the call. So if the network cannot be reached we just retry to send the data again. If B is not responding then we just send the request again, maybe we get a response. Assume the following service that deposits 42 Swiss Francs (CHF) to account “1”. $ curl -X POST http://localhost:8080/accounts/1/deposits -d ' { &quot;amount&quot;:42, &quot;currency&quot;:&quot;CHF&quot; }' If this POST request fails for some reason (e.g. a timeout) and it is sent again then the money might be deposited twice. That is because in case of a timeout or other failures the client does not know if the recipient actually deposited the money or not. Maybe just the response was lost: Of course it might also be the case that the transaction was not successfully processed. If the client does not retry the call then the money will never be added. So what can be done? How to design idempotent services A note on HTTP and REST The following examples are RESTfull services (at least sort of… please don’t call the REST police). However the general principles can also be applied to any other remoting protocol like SOAP, gRPC etc. One thing to note is the fact that HTTP defines which verbs (GET, POST, PUT, …) are supposed to be idempotent and which are not. This is defined in rfc7231. When implementing a webservice this could of course be ignored but it would violate the principles of HTTP/REST. A REST service is not simply idempotent by using any of the “idempotent” verbs. It is idempotent because it was implemented this way. Idempotent: GET, HEAD, PUT, DELETE, OPTIONS and TRACE Non-Idempotent: POST, PATCH (see rfc5789) An interesting comment in respect to idempotence and HTTP can be found on Stackoverflow. Some services are already idempotent Firstly it’s important to note that read-only services are already idempotent. $ curl -X GET http://localhost:8080/accounts/1/deposits/16dfa005-d882-4133-baf2-dfddbe7d61f0 { &quot;amount&quot; : 42, &quot;currency&quot; : &quot;CHF&quot; } This reads the deposit with ID “123”. It does not change the deposit. Whether this is called once or twice does not matter. It will return the same deposit. Of course: if someone else modifies the deposit after the first call then the second call will return the modified deposit. But that is nothing to be solved by making the service idempotent. The point is that the same client is not changing the result by calling the service multiple times. In order to know whether someone changed the data it would be necessary to use versioning and/or locking techniques. That’s a completely different story. Assuming that existing deposits can be modified with a PUT request (the amount is changed to 120 CHF): $ curl -X PUT http://localhost:8080/accounts/1/deposits/c0f3279a-6774-4b2e-a98e-9c7e1bedbe32 \ -H &quot;Content-Type: application/json&quot; -d ' { &quot;amount&quot; : 120, &quot;currency&quot; : &quot;CHF&quot; }' Here we are changing the deposit “123” to have an amount of 120. This can be called multiple times without having a different outcome. So this conforms to HTTP which mandates PUT requests to be idempotent. Adding an id to the body The problem with idemotence is mainly with services that create something. In the example a new deposits should be created for a given account. With HTTP this is usually done with POST: $ curl-X POST http://localhost:8080/accounts/1/deposits -H &quot;Content-Type: application/json&quot; -d ' { &quot;amount&quot;: 42, &quot;currency&quot;: &quot;CHF&quot; }' aa564b53-6992-4577-8eae-c63bcafcb0a4 The creates a new deposit and returns the generated ID (aa564b53-6992-4577-8eae-c63bcafcb0a4). How can it be avoided that multiple invocations of this request won’t create multiple resources? Here is a possible solution: $ curl-X POST http://localhost:8080/accounts/1/deposits \ -H &quot;Content-Type: application/json&quot; -d ' { &quot;id&quot;: 7 &quot;amount&quot;: 42, &quot;currency&quot;: &quot;CHF&quot; }' So instead of letting the service generate an ID for the deposit the caller specifies the deposit ID (7) to be used in the body of the HTTP message. Now the service is able to distinguish whether the caller tries to repeatedly create the same deposit or if he tries to create a new deposit. One thing to consider is also what should happen if a client creates a POST with the same ID but a different deposit (different amount or also currency). The simplest approach is to just have a generic response saying something like “a deposit with this id has already been created” and ignore the request. An issue with this solution is that the client decides which is the deposit ID to be used. Usually the service would like to choose the ID. Using PUT instead of POST for resource creation By using PUT instead of POST it is possible to specify the deposit’s ID in the URL: $ curl -X PUT -H &quot;Content-Type: application/json&quot; http://localhost:8080/accounts/1/deposits/123 -d ' { &quot;amount&quot; : 42, &quot;currency&quot; : &quot;CHF&quot; }' Similar to the POST example above the service is now able to decide whether he as already processed the transaction or not. Like with the POST example it is again the client who chooses the deposit ID (here 123). If the deposit with id “123” does not exist yet, then it is created. Subsequent calls would update the existing deposit. This might work in some cases. However it would be more “RESTfull” to use POST for resource creation and PUT for updates. Providing an ID generator service As mentioned before a service would usually like to control the IDs used for its business objects. Also, if the client chooses the deposit ID then he could accidentally pick an ID that has been used by another client before. The service would then ignore this request and the client would never know. In order to avoid this, clients could use UUIDs (preferably type 4, which are random). These UUIDs should be unique and there shouldn’t be any collisions. The correct format of the ID should be validated in the service. If the service must control the ID to be used then an ID generator service can be implemented: $ curl-X POST http://localhost:8080/id-generator { &quot;id&quot;: &quot;145b63ec-1440-46b5-b29f-6ae3c948dce4&quot; } This id generator just generates a new ID each time it is called. This ID is then used when creating a deposit using POST. The service must check whether the deposit ID specified has been issued before. If this is true then the deposit will be created (if it does not exist yet). The disadvantage of this solution is of course that the client has to perform two calls and an additional service (the id generator) has to be implemented. Providing a request id as request metadata Currently I think that probably the best solution is to use a dedicated request id. In case of HTTP this could be implemented as a HTTP header (according to this I’m not using an x- prefix). The request id is passed as a header using -H &quot;request-id: 123&quot; in curl. curl -X POST http://localhost:8080/accounts/1/deposits \ -H &quot;request-id: 123&quot; \ -H &quot;Content-Type: application/json&quot; -d ' { &quot;amount&quot;: 42, &quot;currency&quot;: &quot;CHF&quot; }' ca6cf316-6061-47a2-8948-6864d5b84839 Note that the service creates a new deposit id and returns it (ca6cf316-6061-47a2-8948-6864d5b84839). The service has to remember all request-ids that he successfully processed. If the service is called with the same request-id again then it indicates this with a special return code. For example you could use a cutstom 4xx return code like 442. According to the rfc2616 it is fine to define custom status codes: HTTP status codes are extensible I think that the HTTP status code 409 (CONFLICT) is probably not suitable because it implies that the client can resolve the conflict and resubmit the request which is not the case here. Once a request id is “used”, the client will always get the same response over and over again. Sidenote: So why not behave “completely idempotent” and just return a 2xx status code? The problem with this solution is that it is often more difficult to implement. If a client sends a request id that has been used before but together with a different request body then what should happen? I think it would be a bad idea to just respond with “OK”. So in order for the service to detect this situation it needs to know the original request body in order to assert that the request is the same as the originally submitted one. Also if the POST returns the ID of the newly generated resource (or even a representation of the resource) then the service has to remember it. So by just saying that the request id has been used before you avoid all of these problem. But from the client’s standpoint it would be easier because as long as it sends the same request-id with same body it doesn’t have to care. Summarizing: By using a request id the service can control the generation of the deposit ID and no additional service is required in order to generate an ID. Of course it is again up to the client to use a proper request-id that will not clash with IDs used by others. A good choice would be a UUID Type 4 and service side validation of the request-id. This approach also allows to properly use POST instead of PUT for creation of resources. Service implementation considerations When implementing and idempotent service special care has to be taken when persisting a request-id. One has to make sure the ID is “unique” (e.g. using UNIQUE constraints in a database). Violations of this constraint must be handled according to the approach taken. Also it must be assured that the business entity (the account deposit in the example) is saved in the same local transaction as the request-id. Note that the following code is not meant a s a good example for software design. I would not implement this all in one class and I’m aware of the @Transactional annotation of course. @Path(&quot;/accounts/{id}&quot;) public class AccountResource { @POST @Produces({MediaType.TEXT_PLAIN}) @Path(&quot;/deposits&quot;) public Response addDeposit(Deposit deposit, @HeaderParam(&quot;request-id&quot;) String requestId) { try { String newDepositId = UUID.randomUUID().toString(); transactionTemplate.execute((status) -&amp;gt; { saveRequestId(requestId); saveNewDeposit(newDepositId, deposit); return null; }); return Response.ok(newDepositId).build(); } catch (Exception e) { if (requestIdExists(requestId)) { // custom status indicating that request id has been used before return Response.status(442).build(); } throw e; } } } In the example application (see here for full source) there are two inserts into the database performed: First the requestId is saved by calling saveRequestId(). Second the business entity itself (the deposit) is saved by calling saveNewDeposit() (the example uses a relational database and SQL for this). Both inserts are preformed inside the same local transaction (here using Spring programmatic transactions). This is very important: If one would insert the requestId in a separate transaction and the second insert for the deposit entry would fail afterwards then the request would appear to be processed on repeated calls. Actually you could also first insert the deposit and afterwards insert the request id. This implementation might return a server error (HTTP status code 500) if it is called twice almost in parallel with the same request id. The first client will succeed locking the request table. The second will fail and enter the catch block. Assuming the transaction that locked the table did not commit yet, then requestIdExists() would return false and the exception will be thrown. It is fine to return a 5xx HTTP status code (this is implicitly done here by rethrowing the error). A client would usually retry calls that returned a technical error. So the next attempt would usually return a 442. This also shows that it is not possible to implement saveIdempotenceId() using two distinct databases. I mentioned that a local transaction must be used. This is only possible “inside” the same database. It would be possible to use two different database and distributed transactions (XA Transactions). The problem with distributed transactions is that they are… well… distributed. So they are actually suffering kind of the same problem we are trying to solve. If you don’t believe me then look-up “xa heuristic exceptions” (look here for example). How to handle non idempotent services Idempotence allows to retry calls that have failed without fearing any unwanted side effects. It is the base for eventual consistency and architectural patterns like SAGAs. It’s amazing how many service I’ve seen in my daily work that are not idempotent. What can be done if you have to use a non idempotent service? Let’s look at a concrete case I had to solve. I implemented a user registration service that - among other things - had to print a password lettern (yes, a physical letter… real paper…you know). For printing I had to call a printing service which was not idempotent. So what do I do if I get a technical error or a timeout from this service? Retry? Then the customer might receive two password letters. If I don’t retry he might get no letter at all. It’s important to note that this problem cannot be solved if the printing service cannot be made idempotent. Period. What I did in this case was to query the printing service for any password letters that have been printed on the same day. If there were any I did not retry. This solution makes it very unlikely that the letter is sent twice and it guarantees that it sent at least once. I haven’t heard of any customer that has received two letters so far but it is obvious that the solution would be more robust and even simpler if the printing service was idempotent. Summary Idempotence is important. You will not be able to achieve eventual consistency if services are not idempotent. Services that are read-only are already idempotent. Special care has to be taken in case of services that create new resources. My recommendation is to use a request id in the header of HTTP POST messages. Make sure to store the request id in the same local transaction as the business entity. Update requests are often also already idempotent.</summary></entry></feed>